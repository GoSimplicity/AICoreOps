// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: k8s_rpc.proto

package k8srpcclient

import (
	"context"

	"k8s_rpc/k8s_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request  = k8s_rpc.Request
	Response = k8s_rpc.Response

	K8sRpc interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	}

	defaultK8sRpc struct {
		cli zrpc.Client
	}
)

func NewK8sRpc(cli zrpc.Client) K8sRpc {
	return &defaultK8sRpc{
		cli: cli,
	}
}

func (m *defaultK8sRpc) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := k8s_rpc.NewK8SRpcClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}
