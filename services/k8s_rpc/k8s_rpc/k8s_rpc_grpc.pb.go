// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: k8s_rpc.proto

package k8s_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	K8SRpc_Ping_FullMethodName = "/k8s_rpc.K8s_rpc/Ping"
)

// K8SRpcClient is the client API for K8SRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SRpcClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type k8SRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SRpcClient(cc grpc.ClientConnInterface) K8SRpcClient {
	return &k8SRpcClient{cc}
}

func (c *k8SRpcClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, K8SRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SRpcServer is the server API for K8SRpc service.
// All implementations must embed UnimplementedK8SRpcServer
// for forward compatibility
type K8SRpcServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedK8SRpcServer()
}

// UnimplementedK8SRpcServer must be embedded to have forward compatible implementations.
type UnimplementedK8SRpcServer struct {
}

func (UnimplementedK8SRpcServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedK8SRpcServer) mustEmbedUnimplementedK8SRpcServer() {}

// UnsafeK8SRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SRpcServer will
// result in compilation errors.
type UnsafeK8SRpcServer interface {
	mustEmbedUnimplementedK8SRpcServer()
}

func RegisterK8SRpcServer(s grpc.ServiceRegistrar, srv K8SRpcServer) {
	s.RegisterService(&K8SRpc_ServiceDesc, srv)
}

func _K8SRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SRpcServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SRpc_ServiceDesc is the grpc.ServiceDesc for K8SRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8s_rpc.K8s_rpc",
	HandlerType: (*K8SRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _K8SRpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8s_rpc.proto",
}
