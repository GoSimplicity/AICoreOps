// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: aicoreops_user.proto

package client

import (
	"context"

	"aicoreops_user/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserRequest  = types.CreateUserRequest
	CreateUserResponse = types.CreateUserResponse
	GetUserRequest    = types.GetUserRequest
	GetUserResponse   = types.GetUserResponse
	UpdateUserRequest = types.UpdateUserRequest
	UpdateUserResponse = types.UpdateUserResponse
	DeleteUserRequest = types.DeleteUserRequest
	DeleteUserResponse = types.DeleteUserResponse
	ListUsersRequest  = types.ListUsersRequest
	ListUsersResponse = types.ListUsersResponse

	AicoreopsUser interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	}

	defaultAicoreopsUser struct {
		cli zrpc.Client
	}
)

func NewAicoreopsUser(cli zrpc.Client) AicoreopsUser {
	return &defaultAicoreopsUser{
		cli: cli,
	}
}

func (m *defaultAicoreopsUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := types.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultAicoreopsUser) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := types.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultAicoreopsUser) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := types.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultAicoreopsUser) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := types.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultAicoreopsUser) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	client := types.NewUserServiceClient(m.cli.Conn())
	return client.ListUsers(ctx, in, opts...)
}
