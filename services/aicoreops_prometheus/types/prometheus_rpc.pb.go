// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: prometheus_rpc.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 采集池相关接口
type ScrapePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PrometheusInstances   []string `protobuf:"bytes,3,rep,name=prometheus_instances,json=prometheusInstances,proto3" json:"prometheus_instances,omitempty"`
	AlertmanagerInstances []string `protobuf:"bytes,4,rep,name=alertmanager_instances,json=alertmanagerInstances,proto3" json:"alertmanager_instances,omitempty"`
	UserId                int64    `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ScrapeInterval        int32    `protobuf:"varint,6,opt,name=scrape_interval,json=scrapeInterval,proto3" json:"scrape_interval,omitempty"`
	ScrapeTimeout         int32    `protobuf:"varint,7,opt,name=scrape_timeout,json=scrapeTimeout,proto3" json:"scrape_timeout,omitempty"`
	ExternalLabels        []string `protobuf:"bytes,8,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	SupportAlert          int32    `protobuf:"varint,9,opt,name=support_alert,json=supportAlert,proto3" json:"support_alert,omitempty"`
	SupportRecord         int32    `protobuf:"varint,10,opt,name=support_record,json=supportRecord,proto3" json:"support_record,omitempty"`
	RemoteReadUrl         string   `protobuf:"bytes,11,opt,name=remote_read_url,json=remoteReadUrl,proto3" json:"remote_read_url,omitempty"`
	AlertmanagerUrl       string   `protobuf:"bytes,12,opt,name=alertmanager_url,json=alertmanagerUrl,proto3" json:"alertmanager_url,omitempty"`
	RuleFilePath          string   `protobuf:"bytes,13,opt,name=rule_file_path,json=ruleFilePath,proto3" json:"rule_file_path,omitempty"`
	RecordFilePath        string   `protobuf:"bytes,14,opt,name=record_file_path,json=recordFilePath,proto3" json:"record_file_path,omitempty"`
	RemoteWriteUrl        string   `protobuf:"bytes,15,opt,name=remote_write_url,json=remoteWriteUrl,proto3" json:"remote_write_url,omitempty"`
	RemoteTimeoutSeconds  int32    `protobuf:"varint,16,opt,name=remote_timeout_seconds,json=remoteTimeoutSeconds,proto3" json:"remote_timeout_seconds,omitempty"`
}

func (x *ScrapePool) Reset() {
	*x = ScrapePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapePool) ProtoMessage() {}

func (x *ScrapePool) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapePool.ProtoReflect.Descriptor instead.
func (*ScrapePool) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *ScrapePool) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScrapePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScrapePool) GetPrometheusInstances() []string {
	if x != nil {
		return x.PrometheusInstances
	}
	return nil
}

func (x *ScrapePool) GetAlertmanagerInstances() []string {
	if x != nil {
		return x.AlertmanagerInstances
	}
	return nil
}

func (x *ScrapePool) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ScrapePool) GetScrapeInterval() int32 {
	if x != nil {
		return x.ScrapeInterval
	}
	return 0
}

func (x *ScrapePool) GetScrapeTimeout() int32 {
	if x != nil {
		return x.ScrapeTimeout
	}
	return 0
}

func (x *ScrapePool) GetExternalLabels() []string {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *ScrapePool) GetSupportAlert() int32 {
	if x != nil {
		return x.SupportAlert
	}
	return 0
}

func (x *ScrapePool) GetSupportRecord() int32 {
	if x != nil {
		return x.SupportRecord
	}
	return 0
}

func (x *ScrapePool) GetRemoteReadUrl() string {
	if x != nil {
		return x.RemoteReadUrl
	}
	return ""
}

func (x *ScrapePool) GetAlertmanagerUrl() string {
	if x != nil {
		return x.AlertmanagerUrl
	}
	return ""
}

func (x *ScrapePool) GetRuleFilePath() string {
	if x != nil {
		return x.RuleFilePath
	}
	return ""
}

func (x *ScrapePool) GetRecordFilePath() string {
	if x != nil {
		return x.RecordFilePath
	}
	return ""
}

func (x *ScrapePool) GetRemoteWriteUrl() string {
	if x != nil {
		return x.RemoteWriteUrl
	}
	return ""
}

func (x *ScrapePool) GetRemoteTimeoutSeconds() int32 {
	if x != nil {
		return x.RemoteTimeoutSeconds
	}
	return 0
}

type GetMonitorScrapePoolListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMonitorScrapePoolListRequest) Reset() {
	*x = GetMonitorScrapePoolListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorScrapePoolListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorScrapePoolListRequest) ProtoMessage() {}

func (x *GetMonitorScrapePoolListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorScrapePoolListRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorScrapePoolListRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{1}
}

type GetMonitorScrapePoolListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ScrapePool `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMonitorScrapePoolListResponse) Reset() {
	*x = GetMonitorScrapePoolListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorScrapePoolListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorScrapePoolListResponse) ProtoMessage() {}

func (x *GetMonitorScrapePoolListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorScrapePoolListResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorScrapePoolListResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetMonitorScrapePoolListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMonitorScrapePoolListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMonitorScrapePoolListResponse) GetData() []*ScrapePool {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMonitorScrapePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool *ScrapePool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *CreateMonitorScrapePoolRequest) Reset() {
	*x = CreateMonitorScrapePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorScrapePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorScrapePoolRequest) ProtoMessage() {}

func (x *CreateMonitorScrapePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorScrapePoolRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitorScrapePoolRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMonitorScrapePoolRequest) GetPool() *ScrapePool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type CreateMonitorScrapePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateMonitorScrapePoolResponse) Reset() {
	*x = CreateMonitorScrapePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorScrapePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorScrapePoolResponse) ProtoMessage() {}

func (x *CreateMonitorScrapePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorScrapePoolResponse.ProtoReflect.Descriptor instead.
func (*CreateMonitorScrapePoolResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMonitorScrapePoolResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateMonitorScrapePoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMonitorScrapePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool *ScrapePool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *UpdateMonitorScrapePoolRequest) Reset() {
	*x = UpdateMonitorScrapePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorScrapePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorScrapePoolRequest) ProtoMessage() {}

func (x *UpdateMonitorScrapePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorScrapePoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorScrapePoolRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateMonitorScrapePoolRequest) GetPool() *ScrapePool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type UpdateMonitorScrapePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMonitorScrapePoolResponse) Reset() {
	*x = UpdateMonitorScrapePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorScrapePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorScrapePoolResponse) ProtoMessage() {}

func (x *UpdateMonitorScrapePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorScrapePoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateMonitorScrapePoolResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMonitorScrapePoolResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateMonitorScrapePoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMonitorScrapePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMonitorScrapePoolRequest) Reset() {
	*x = DeleteMonitorScrapePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorScrapePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorScrapePoolRequest) ProtoMessage() {}

func (x *DeleteMonitorScrapePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorScrapePoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitorScrapePoolRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMonitorScrapePoolRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMonitorScrapePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMonitorScrapePoolResponse) Reset() {
	*x = DeleteMonitorScrapePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorScrapePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorScrapePoolResponse) ProtoMessage() {}

func (x *DeleteMonitorScrapePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorScrapePoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteMonitorScrapePoolResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteMonitorScrapePoolResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteMonitorScrapePoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Alertmanager 相关接口
type AlertmanagerPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AlertmanagerInstances []string `protobuf:"bytes,3,rep,name=alertmanager_instances,json=alertmanagerInstances,proto3" json:"alertmanager_instances,omitempty"`
	UserId                int64    `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ResolveTimeout        string   `protobuf:"bytes,5,opt,name=resolve_timeout,json=resolveTimeout,proto3" json:"resolve_timeout,omitempty"`
	GroupWait             string   `protobuf:"bytes,6,opt,name=group_wait,json=groupWait,proto3" json:"group_wait,omitempty"`
	GroupInterval         string   `protobuf:"bytes,7,opt,name=group_interval,json=groupInterval,proto3" json:"group_interval,omitempty"`
	RepeatInterval        string   `protobuf:"bytes,8,opt,name=repeat_interval,json=repeatInterval,proto3" json:"repeat_interval,omitempty"`
	GroupBy               []string `protobuf:"bytes,9,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Receiver              string   `protobuf:"bytes,10,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *AlertmanagerPool) Reset() {
	*x = AlertmanagerPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertmanagerPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertmanagerPool) ProtoMessage() {}

func (x *AlertmanagerPool) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertmanagerPool.ProtoReflect.Descriptor instead.
func (*AlertmanagerPool) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *AlertmanagerPool) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AlertmanagerPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlertmanagerPool) GetAlertmanagerInstances() []string {
	if x != nil {
		return x.AlertmanagerInstances
	}
	return nil
}

func (x *AlertmanagerPool) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AlertmanagerPool) GetResolveTimeout() string {
	if x != nil {
		return x.ResolveTimeout
	}
	return ""
}

func (x *AlertmanagerPool) GetGroupWait() string {
	if x != nil {
		return x.GroupWait
	}
	return ""
}

func (x *AlertmanagerPool) GetGroupInterval() string {
	if x != nil {
		return x.GroupInterval
	}
	return ""
}

func (x *AlertmanagerPool) GetRepeatInterval() string {
	if x != nil {
		return x.RepeatInterval
	}
	return ""
}

func (x *AlertmanagerPool) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *AlertmanagerPool) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

type GetAlertmanagerPoolListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAlertmanagerPoolListRequest) Reset() {
	*x = GetAlertmanagerPoolListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertmanagerPoolListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertmanagerPoolListRequest) ProtoMessage() {}

func (x *GetAlertmanagerPoolListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertmanagerPoolListRequest.ProtoReflect.Descriptor instead.
func (*GetAlertmanagerPoolListRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{10}
}

type GetAlertmanagerPoolListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*AlertmanagerPool `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAlertmanagerPoolListResponse) Reset() {
	*x = GetAlertmanagerPoolListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertmanagerPoolListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertmanagerPoolListResponse) ProtoMessage() {}

func (x *GetAlertmanagerPoolListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertmanagerPoolListResponse.ProtoReflect.Descriptor instead.
func (*GetAlertmanagerPoolListResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetAlertmanagerPoolListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAlertmanagerPoolListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAlertmanagerPoolListResponse) GetData() []*AlertmanagerPool {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMonitorAlertManagerPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool *AlertmanagerPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *CreateMonitorAlertManagerPoolRequest) Reset() {
	*x = CreateMonitorAlertManagerPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorAlertManagerPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorAlertManagerPoolRequest) ProtoMessage() {}

func (x *CreateMonitorAlertManagerPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorAlertManagerPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitorAlertManagerPoolRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *CreateMonitorAlertManagerPoolRequest) GetPool() *AlertmanagerPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type CreateMonitorAlertManagerPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateMonitorAlertManagerPoolResponse) Reset() {
	*x = CreateMonitorAlertManagerPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorAlertManagerPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorAlertManagerPoolResponse) ProtoMessage() {}

func (x *CreateMonitorAlertManagerPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorAlertManagerPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateMonitorAlertManagerPoolResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *CreateMonitorAlertManagerPoolResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateMonitorAlertManagerPoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMonitorAlertManagerPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool *AlertmanagerPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *UpdateMonitorAlertManagerPoolRequest) Reset() {
	*x = UpdateMonitorAlertManagerPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorAlertManagerPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorAlertManagerPoolRequest) ProtoMessage() {}

func (x *UpdateMonitorAlertManagerPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorAlertManagerPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorAlertManagerPoolRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateMonitorAlertManagerPoolRequest) GetPool() *AlertmanagerPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type UpdateMonitorAlertManagerPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMonitorAlertManagerPoolResponse) Reset() {
	*x = UpdateMonitorAlertManagerPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorAlertManagerPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorAlertManagerPoolResponse) ProtoMessage() {}

func (x *UpdateMonitorAlertManagerPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorAlertManagerPoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateMonitorAlertManagerPoolResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMonitorAlertManagerPoolResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateMonitorAlertManagerPoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMonitorAlertManagerPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMonitorAlertManagerPoolRequest) Reset() {
	*x = DeleteMonitorAlertManagerPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorAlertManagerPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorAlertManagerPoolRequest) ProtoMessage() {}

func (x *DeleteMonitorAlertManagerPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorAlertManagerPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitorAlertManagerPoolRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteMonitorAlertManagerPoolRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMonitorAlertManagerPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMonitorAlertManagerPoolResponse) Reset() {
	*x = DeleteMonitorAlertManagerPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorAlertManagerPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorAlertManagerPoolResponse) ProtoMessage() {}

func (x *DeleteMonitorAlertManagerPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorAlertManagerPoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteMonitorAlertManagerPoolResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteMonitorAlertManagerPoolResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteMonitorAlertManagerPoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 采集任务
type ScrapeJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserId                   int64   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Enable                   int32   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	ServiceDiscoveryType     string  `protobuf:"bytes,5,opt,name=service_discovery_type,json=serviceDiscoveryType,proto3" json:"service_discovery_type,omitempty"`
	MetricsPath              string  `protobuf:"bytes,6,opt,name=metrics_path,json=metricsPath,proto3" json:"metrics_path,omitempty"`
	Scheme                   string  `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`
	ScrapeInterval           int32   `protobuf:"varint,8,opt,name=scrape_interval,json=scrapeInterval,proto3" json:"scrape_interval,omitempty"`
	ScrapeTimeout            int32   `protobuf:"varint,9,opt,name=scrape_timeout,json=scrapeTimeout,proto3" json:"scrape_timeout,omitempty"`
	PoolId                   int64   `protobuf:"varint,10,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RelabelConfigsYamlString string  `protobuf:"bytes,11,opt,name=relabel_configs_yaml_string,json=relabelConfigsYamlString,proto3" json:"relabel_configs_yaml_string,omitempty"`
	RefreshInterval          int32   `protobuf:"varint,12,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	Port                     int32   `protobuf:"varint,13,opt,name=port,proto3" json:"port,omitempty"`
	TreeNodeIds              []int64 `protobuf:"varint,14,rep,packed,name=tree_node_ids,json=treeNodeIds,proto3" json:"tree_node_ids,omitempty"`
	KubeConfigFilePath       string  `protobuf:"bytes,15,opt,name=kube_config_file_path,json=kubeConfigFilePath,proto3" json:"kube_config_file_path,omitempty"`
	TlsCaFilePath            string  `protobuf:"bytes,16,opt,name=tls_ca_file_path,json=tlsCaFilePath,proto3" json:"tls_ca_file_path,omitempty"`
	TlsCaContent             string  `protobuf:"bytes,17,opt,name=tls_ca_content,json=tlsCaContent,proto3" json:"tls_ca_content,omitempty"`
	BearerToken              string  `protobuf:"bytes,18,opt,name=bearer_token,json=bearerToken,proto3" json:"bearer_token,omitempty"`
	BearerTokenFile          string  `protobuf:"bytes,19,opt,name=bearer_token_file,json=bearerTokenFile,proto3" json:"bearer_token_file,omitempty"`
	KubernetesSdRole         string  `protobuf:"bytes,20,opt,name=kubernetes_sd_role,json=kubernetesSdRole,proto3" json:"kubernetes_sd_role,omitempty"`
}

func (x *ScrapeJob) Reset() {
	*x = ScrapeJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrapeJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrapeJob) ProtoMessage() {}

func (x *ScrapeJob) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrapeJob.ProtoReflect.Descriptor instead.
func (*ScrapeJob) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *ScrapeJob) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScrapeJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScrapeJob) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ScrapeJob) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *ScrapeJob) GetServiceDiscoveryType() string {
	if x != nil {
		return x.ServiceDiscoveryType
	}
	return ""
}

func (x *ScrapeJob) GetMetricsPath() string {
	if x != nil {
		return x.MetricsPath
	}
	return ""
}

func (x *ScrapeJob) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *ScrapeJob) GetScrapeInterval() int32 {
	if x != nil {
		return x.ScrapeInterval
	}
	return 0
}

func (x *ScrapeJob) GetScrapeTimeout() int32 {
	if x != nil {
		return x.ScrapeTimeout
	}
	return 0
}

func (x *ScrapeJob) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *ScrapeJob) GetRelabelConfigsYamlString() string {
	if x != nil {
		return x.RelabelConfigsYamlString
	}
	return ""
}

func (x *ScrapeJob) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *ScrapeJob) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ScrapeJob) GetTreeNodeIds() []int64 {
	if x != nil {
		return x.TreeNodeIds
	}
	return nil
}

func (x *ScrapeJob) GetKubeConfigFilePath() string {
	if x != nil {
		return x.KubeConfigFilePath
	}
	return ""
}

func (x *ScrapeJob) GetTlsCaFilePath() string {
	if x != nil {
		return x.TlsCaFilePath
	}
	return ""
}

func (x *ScrapeJob) GetTlsCaContent() string {
	if x != nil {
		return x.TlsCaContent
	}
	return ""
}

func (x *ScrapeJob) GetBearerToken() string {
	if x != nil {
		return x.BearerToken
	}
	return ""
}

func (x *ScrapeJob) GetBearerTokenFile() string {
	if x != nil {
		return x.BearerTokenFile
	}
	return ""
}

func (x *ScrapeJob) GetKubernetesSdRole() string {
	if x != nil {
		return x.KubernetesSdRole
	}
	return ""
}

type GetMonitorScrapeJobListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMonitorScrapeJobListRequest) Reset() {
	*x = GetMonitorScrapeJobListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorScrapeJobListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorScrapeJobListRequest) ProtoMessage() {}

func (x *GetMonitorScrapeJobListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorScrapeJobListRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorScrapeJobListRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{19}
}

type GetMonitorScrapeJobListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ScrapeJob `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMonitorScrapeJobListResponse) Reset() {
	*x = GetMonitorScrapeJobListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorScrapeJobListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorScrapeJobListResponse) ProtoMessage() {}

func (x *GetMonitorScrapeJobListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorScrapeJobListResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorScrapeJobListResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetMonitorScrapeJobListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMonitorScrapeJobListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMonitorScrapeJobListResponse) GetData() []*ScrapeJob {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateMonitorScrapeJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *ScrapeJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *CreateMonitorScrapeJobRequest) Reset() {
	*x = CreateMonitorScrapeJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorScrapeJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorScrapeJobRequest) ProtoMessage() {}

func (x *CreateMonitorScrapeJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorScrapeJobRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitorScrapeJobRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *CreateMonitorScrapeJobRequest) GetJob() *ScrapeJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type CreateMonitorScrapeJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateMonitorScrapeJobResponse) Reset() {
	*x = CreateMonitorScrapeJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorScrapeJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorScrapeJobResponse) ProtoMessage() {}

func (x *CreateMonitorScrapeJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorScrapeJobResponse.ProtoReflect.Descriptor instead.
func (*CreateMonitorScrapeJobResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *CreateMonitorScrapeJobResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateMonitorScrapeJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMonitorScrapeJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *ScrapeJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *UpdateMonitorScrapeJobRequest) Reset() {
	*x = UpdateMonitorScrapeJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorScrapeJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorScrapeJobRequest) ProtoMessage() {}

func (x *UpdateMonitorScrapeJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorScrapeJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorScrapeJobRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateMonitorScrapeJobRequest) GetJob() *ScrapeJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateMonitorScrapeJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMonitorScrapeJobResponse) Reset() {
	*x = UpdateMonitorScrapeJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorScrapeJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorScrapeJobResponse) ProtoMessage() {}

func (x *UpdateMonitorScrapeJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorScrapeJobResponse.ProtoReflect.Descriptor instead.
func (*UpdateMonitorScrapeJobResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateMonitorScrapeJobResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateMonitorScrapeJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMonitorScrapeJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMonitorScrapeJobRequest) Reset() {
	*x = DeleteMonitorScrapeJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorScrapeJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorScrapeJobRequest) ProtoMessage() {}

func (x *DeleteMonitorScrapeJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorScrapeJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitorScrapeJobRequest) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteMonitorScrapeJobRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMonitorScrapeJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMonitorScrapeJobResponse) Reset() {
	*x = DeleteMonitorScrapeJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prometheus_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorScrapeJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorScrapeJobResponse) ProtoMessage() {}

func (x *DeleteMonitorScrapeJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prometheus_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorScrapeJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteMonitorScrapeJobResponse) Descriptor() ([]byte, []int) {
	return file_prometheus_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteMonitorScrapeJobResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteMonitorScrapeJobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_prometheus_rpc_proto protoreflect.FileDescriptor

var file_prometheus_rpc_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x22, 0xfb, 0x04, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x16,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x75,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x4f, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22,
	0x4f, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4f, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x10, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x61, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x22, 0x55, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x55, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x36, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdb,
	0x05, 0x0a, 0x09, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x79,
	0x61, 0x6d, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x59, 0x61, 0x6d, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x27, 0x0a, 0x10, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6c, 0x73, 0x43,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x73,
	0x5f, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6c, 0x73, 0x43, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x64, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7e,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x4e, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x4e, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x9b, 0x0c, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x12, 0x7d,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61,
	0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a,
	0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a,
	0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f,
	0x62, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x77, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x72, 0x61, 0x70, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prometheus_rpc_proto_rawDescOnce sync.Once
	file_prometheus_rpc_proto_rawDescData = file_prometheus_rpc_proto_rawDesc
)

func file_prometheus_rpc_proto_rawDescGZIP() []byte {
	file_prometheus_rpc_proto_rawDescOnce.Do(func() {
		file_prometheus_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_prometheus_rpc_proto_rawDescData)
	})
	return file_prometheus_rpc_proto_rawDescData
}

var file_prometheus_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_prometheus_rpc_proto_goTypes = []any{
	(*ScrapePool)(nil),                            // 0: prometheus_rpc.ScrapePool
	(*GetMonitorScrapePoolListRequest)(nil),       // 1: prometheus_rpc.GetMonitorScrapePoolListRequest
	(*GetMonitorScrapePoolListResponse)(nil),      // 2: prometheus_rpc.GetMonitorScrapePoolListResponse
	(*CreateMonitorScrapePoolRequest)(nil),        // 3: prometheus_rpc.CreateMonitorScrapePoolRequest
	(*CreateMonitorScrapePoolResponse)(nil),       // 4: prometheus_rpc.CreateMonitorScrapePoolResponse
	(*UpdateMonitorScrapePoolRequest)(nil),        // 5: prometheus_rpc.UpdateMonitorScrapePoolRequest
	(*UpdateMonitorScrapePoolResponse)(nil),       // 6: prometheus_rpc.UpdateMonitorScrapePoolResponse
	(*DeleteMonitorScrapePoolRequest)(nil),        // 7: prometheus_rpc.DeleteMonitorScrapePoolRequest
	(*DeleteMonitorScrapePoolResponse)(nil),       // 8: prometheus_rpc.DeleteMonitorScrapePoolResponse
	(*AlertmanagerPool)(nil),                      // 9: prometheus_rpc.AlertmanagerPool
	(*GetAlertmanagerPoolListRequest)(nil),        // 10: prometheus_rpc.GetAlertmanagerPoolListRequest
	(*GetAlertmanagerPoolListResponse)(nil),       // 11: prometheus_rpc.GetAlertmanagerPoolListResponse
	(*CreateMonitorAlertManagerPoolRequest)(nil),  // 12: prometheus_rpc.CreateMonitorAlertManagerPoolRequest
	(*CreateMonitorAlertManagerPoolResponse)(nil), // 13: prometheus_rpc.CreateMonitorAlertManagerPoolResponse
	(*UpdateMonitorAlertManagerPoolRequest)(nil),  // 14: prometheus_rpc.UpdateMonitorAlertManagerPoolRequest
	(*UpdateMonitorAlertManagerPoolResponse)(nil), // 15: prometheus_rpc.UpdateMonitorAlertManagerPoolResponse
	(*DeleteMonitorAlertManagerPoolRequest)(nil),  // 16: prometheus_rpc.DeleteMonitorAlertManagerPoolRequest
	(*DeleteMonitorAlertManagerPoolResponse)(nil), // 17: prometheus_rpc.DeleteMonitorAlertManagerPoolResponse
	(*ScrapeJob)(nil),                             // 18: prometheus_rpc.ScrapeJob
	(*GetMonitorScrapeJobListRequest)(nil),        // 19: prometheus_rpc.GetMonitorScrapeJobListRequest
	(*GetMonitorScrapeJobListResponse)(nil),       // 20: prometheus_rpc.GetMonitorScrapeJobListResponse
	(*CreateMonitorScrapeJobRequest)(nil),         // 21: prometheus_rpc.CreateMonitorScrapeJobRequest
	(*CreateMonitorScrapeJobResponse)(nil),        // 22: prometheus_rpc.CreateMonitorScrapeJobResponse
	(*UpdateMonitorScrapeJobRequest)(nil),         // 23: prometheus_rpc.UpdateMonitorScrapeJobRequest
	(*UpdateMonitorScrapeJobResponse)(nil),        // 24: prometheus_rpc.UpdateMonitorScrapeJobResponse
	(*DeleteMonitorScrapeJobRequest)(nil),         // 25: prometheus_rpc.DeleteMonitorScrapeJobRequest
	(*DeleteMonitorScrapeJobResponse)(nil),        // 26: prometheus_rpc.DeleteMonitorScrapeJobResponse
}
var file_prometheus_rpc_proto_depIdxs = []int32{
	0,  // 0: prometheus_rpc.GetMonitorScrapePoolListResponse.data:type_name -> prometheus_rpc.ScrapePool
	0,  // 1: prometheus_rpc.CreateMonitorScrapePoolRequest.pool:type_name -> prometheus_rpc.ScrapePool
	0,  // 2: prometheus_rpc.UpdateMonitorScrapePoolRequest.pool:type_name -> prometheus_rpc.ScrapePool
	9,  // 3: prometheus_rpc.GetAlertmanagerPoolListResponse.data:type_name -> prometheus_rpc.AlertmanagerPool
	9,  // 4: prometheus_rpc.CreateMonitorAlertManagerPoolRequest.pool:type_name -> prometheus_rpc.AlertmanagerPool
	9,  // 5: prometheus_rpc.UpdateMonitorAlertManagerPoolRequest.pool:type_name -> prometheus_rpc.AlertmanagerPool
	18, // 6: prometheus_rpc.GetMonitorScrapeJobListResponse.data:type_name -> prometheus_rpc.ScrapeJob
	18, // 7: prometheus_rpc.CreateMonitorScrapeJobRequest.job:type_name -> prometheus_rpc.ScrapeJob
	18, // 8: prometheus_rpc.UpdateMonitorScrapeJobRequest.job:type_name -> prometheus_rpc.ScrapeJob
	1,  // 9: prometheus_rpc.Prometheus_rpc.GetMonitorScrapePoolList:input_type -> prometheus_rpc.GetMonitorScrapePoolListRequest
	3,  // 10: prometheus_rpc.Prometheus_rpc.CreateMonitorScrapePool:input_type -> prometheus_rpc.CreateMonitorScrapePoolRequest
	5,  // 11: prometheus_rpc.Prometheus_rpc.UpdateMonitorScrapePool:input_type -> prometheus_rpc.UpdateMonitorScrapePoolRequest
	7,  // 12: prometheus_rpc.Prometheus_rpc.DeleteMonitorScrapePool:input_type -> prometheus_rpc.DeleteMonitorScrapePoolRequest
	10, // 13: prometheus_rpc.Prometheus_rpc.GetMonitorAlertmanagerPoolList:input_type -> prometheus_rpc.GetAlertmanagerPoolListRequest
	12, // 14: prometheus_rpc.Prometheus_rpc.CreateMonitorAlertManagerPool:input_type -> prometheus_rpc.CreateMonitorAlertManagerPoolRequest
	14, // 15: prometheus_rpc.Prometheus_rpc.UpdateMonitorAlertManagerPool:input_type -> prometheus_rpc.UpdateMonitorAlertManagerPoolRequest
	16, // 16: prometheus_rpc.Prometheus_rpc.DeleteMonitorAlertManagerPool:input_type -> prometheus_rpc.DeleteMonitorAlertManagerPoolRequest
	19, // 17: prometheus_rpc.Prometheus_rpc.GetMonitorScrapeJobList:input_type -> prometheus_rpc.GetMonitorScrapeJobListRequest
	21, // 18: prometheus_rpc.Prometheus_rpc.CreateMonitorScrapeJob:input_type -> prometheus_rpc.CreateMonitorScrapeJobRequest
	23, // 19: prometheus_rpc.Prometheus_rpc.UpdateMonitorScrapeJob:input_type -> prometheus_rpc.UpdateMonitorScrapeJobRequest
	25, // 20: prometheus_rpc.Prometheus_rpc.DeleteMonitorScrapeJob:input_type -> prometheus_rpc.DeleteMonitorScrapeJobRequest
	2,  // 21: prometheus_rpc.Prometheus_rpc.GetMonitorScrapePoolList:output_type -> prometheus_rpc.GetMonitorScrapePoolListResponse
	4,  // 22: prometheus_rpc.Prometheus_rpc.CreateMonitorScrapePool:output_type -> prometheus_rpc.CreateMonitorScrapePoolResponse
	6,  // 23: prometheus_rpc.Prometheus_rpc.UpdateMonitorScrapePool:output_type -> prometheus_rpc.UpdateMonitorScrapePoolResponse
	8,  // 24: prometheus_rpc.Prometheus_rpc.DeleteMonitorScrapePool:output_type -> prometheus_rpc.DeleteMonitorScrapePoolResponse
	11, // 25: prometheus_rpc.Prometheus_rpc.GetMonitorAlertmanagerPoolList:output_type -> prometheus_rpc.GetAlertmanagerPoolListResponse
	13, // 26: prometheus_rpc.Prometheus_rpc.CreateMonitorAlertManagerPool:output_type -> prometheus_rpc.CreateMonitorAlertManagerPoolResponse
	15, // 27: prometheus_rpc.Prometheus_rpc.UpdateMonitorAlertManagerPool:output_type -> prometheus_rpc.UpdateMonitorAlertManagerPoolResponse
	17, // 28: prometheus_rpc.Prometheus_rpc.DeleteMonitorAlertManagerPool:output_type -> prometheus_rpc.DeleteMonitorAlertManagerPoolResponse
	20, // 29: prometheus_rpc.Prometheus_rpc.GetMonitorScrapeJobList:output_type -> prometheus_rpc.GetMonitorScrapeJobListResponse
	22, // 30: prometheus_rpc.Prometheus_rpc.CreateMonitorScrapeJob:output_type -> prometheus_rpc.CreateMonitorScrapeJobResponse
	24, // 31: prometheus_rpc.Prometheus_rpc.UpdateMonitorScrapeJob:output_type -> prometheus_rpc.UpdateMonitorScrapeJobResponse
	26, // 32: prometheus_rpc.Prometheus_rpc.DeleteMonitorScrapeJob:output_type -> prometheus_rpc.DeleteMonitorScrapeJobResponse
	21, // [21:33] is the sub-list for method output_type
	9,  // [9:21] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_prometheus_rpc_proto_init() }
func file_prometheus_rpc_proto_init() {
	if File_prometheus_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prometheus_rpc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ScrapePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetMonitorScrapePoolListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetMonitorScrapePoolListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMonitorScrapePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMonitorScrapePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMonitorScrapePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMonitorScrapePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMonitorScrapePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMonitorScrapePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AlertmanagerPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetAlertmanagerPoolListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetAlertmanagerPoolListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMonitorAlertManagerPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMonitorAlertManagerPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMonitorAlertManagerPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMonitorAlertManagerPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMonitorAlertManagerPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMonitorAlertManagerPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ScrapeJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetMonitorScrapeJobListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetMonitorScrapeJobListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMonitorScrapeJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMonitorScrapeJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMonitorScrapeJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMonitorScrapeJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMonitorScrapeJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prometheus_rpc_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMonitorScrapeJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prometheus_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prometheus_rpc_proto_goTypes,
		DependencyIndexes: file_prometheus_rpc_proto_depIdxs,
		MessageInfos:      file_prometheus_rpc_proto_msgTypes,
	}.Build()
	File_prometheus_rpc_proto = out.File
	file_prometheus_rpc_proto_rawDesc = nil
	file_prometheus_rpc_proto_goTypes = nil
	file_prometheus_rpc_proto_depIdxs = nil
}
