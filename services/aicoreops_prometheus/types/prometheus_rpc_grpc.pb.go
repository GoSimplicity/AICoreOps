// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: prometheus_rpc.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrometheusRpc_GetMonitorScrapePoolList_FullMethodName          = "/prometheus_rpc.Prometheus_rpc/GetMonitorScrapePoolList"
	PrometheusRpc_CreateMonitorScrapePool_FullMethodName           = "/prometheus_rpc.Prometheus_rpc/CreateMonitorScrapePool"
	PrometheusRpc_UpdateMonitorScrapePool_FullMethodName           = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorScrapePool"
	PrometheusRpc_DeleteMonitorScrapePool_FullMethodName           = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorScrapePool"
	PrometheusRpc_GetMonitorAlertManagerPoolList_FullMethodName    = "/prometheus_rpc.Prometheus_rpc/GetMonitorAlertManagerPoolList"
	PrometheusRpc_CreateMonitorAlertManagerPool_FullMethodName     = "/prometheus_rpc.Prometheus_rpc/CreateMonitorAlertManagerPool"
	PrometheusRpc_UpdateMonitorAlertManagerPool_FullMethodName     = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorAlertManagerPool"
	PrometheusRpc_DeleteMonitorAlertManagerPool_FullMethodName     = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorAlertManagerPool"
	PrometheusRpc_GetMonitorScrapeJobList_FullMethodName           = "/prometheus_rpc.Prometheus_rpc/GetMonitorScrapeJobList"
	PrometheusRpc_CreateMonitorScrapeJob_FullMethodName            = "/prometheus_rpc.Prometheus_rpc/CreateMonitorScrapeJob"
	PrometheusRpc_UpdateMonitorScrapeJob_FullMethodName            = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorScrapeJob"
	PrometheusRpc_DeleteMonitorScrapeJob_FullMethodName            = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorScrapeJob"
	PrometheusRpc_GetMonitorAlertRuleList_FullMethodName           = "/prometheus_rpc.Prometheus_rpc/GetMonitorAlertRuleList"
	PrometheusRpc_CreateMonitorAlertRule_FullMethodName            = "/prometheus_rpc.Prometheus_rpc/CreateMonitorAlertRule"
	PrometheusRpc_UpdateMonitorAlertRule_FullMethodName            = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorAlertRule"
	PrometheusRpc_DeleteMonitorAlertRule_FullMethodName            = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorAlertRule"
	PrometheusRpc_CheckPromqlExpr_FullMethodName                   = "/prometheus_rpc.Prometheus_rpc/CheckPromqlExpr"
	PrometheusRpc_EnableSwitchMonitorAlertRule_FullMethodName      = "/prometheus_rpc.Prometheus_rpc/EnableSwitchMonitorAlertRule"
	PrometheusRpc_BatchEnableSwitchMonitorAlertRule_FullMethodName = "/prometheus_rpc.Prometheus_rpc/BatchEnableSwitchMonitorAlertRule"
	PrometheusRpc_BatchDeleteMonitorAlertRule_FullMethodName       = "/prometheus_rpc.Prometheus_rpc/BatchDeleteMonitorAlertRule"
)

// PrometheusRpcClient is the client API for PrometheusRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusRpcClient interface {
	// scrapePool 采集池
	GetMonitorScrapePoolList(ctx context.Context, in *GetMonitorScrapePoolListRequest, opts ...grpc.CallOption) (*GetMonitorScrapePoolListResponse, error)
	CreateMonitorScrapePool(ctx context.Context, in *CreateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*CreateMonitorScrapePoolResponse, error)
	UpdateMonitorScrapePool(ctx context.Context, in *UpdateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapePoolResponse, error)
	DeleteMonitorScrapePool(ctx context.Context, in *DeleteMonitorScrapePoolRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapePoolResponse, error)
	// alertmanagerPool 告警池
	GetMonitorAlertManagerPoolList(ctx context.Context, in *GetAlertManagerPoolListRequest, opts ...grpc.CallOption) (*GetAlertManagerPoolListResponse, error)
	CreateMonitorAlertManagerPool(ctx context.Context, in *CreateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*CreateMonitorAlertManagerPoolResponse, error)
	UpdateMonitorAlertManagerPool(ctx context.Context, in *UpdateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*UpdateMonitorAlertManagerPoolResponse, error)
	DeleteMonitorAlertManagerPool(ctx context.Context, in *DeleteMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*DeleteMonitorAlertManagerPoolResponse, error)
	// scrapeJob 采集任务
	GetMonitorScrapeJobList(ctx context.Context, in *GetMonitorScrapeJobListRequest, opts ...grpc.CallOption) (*GetMonitorScrapeJobListResponse, error)
	CreateMonitorScrapeJob(ctx context.Context, in *CreateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*CreateMonitorScrapeJobResponse, error)
	UpdateMonitorScrapeJob(ctx context.Context, in *UpdateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapeJobResponse, error)
	DeleteMonitorScrapeJob(ctx context.Context, in *DeleteMonitorScrapeJobRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapeJobResponse, error)
	// alertRule 告警规则
	GetMonitorAlertRuleList(ctx context.Context, in *GetMonitorAlertRuleListRequest, opts ...grpc.CallOption) (*GetMonitorAlertRuleListResponse, error)
	CreateMonitorAlertRule(ctx context.Context, in *CreateMonitorAlertRuleRequest, opts ...grpc.CallOption) (*CreateMonitorAlertRuleResponse, error)
	UpdateMonitorAlertRule(ctx context.Context, in *UpdateMonitorAlertRuleRequest, opts ...grpc.CallOption) (*UpdateMonitorAlertRuleResponse, error)
	DeleteMonitorAlertRule(ctx context.Context, in *DeleteMonitorAlertRuleRequest, opts ...grpc.CallOption) (*DeleteMonitorAlertRuleResponse, error)
	CheckPromqlExpr(ctx context.Context, in *CheckPromqlExprRequest, opts ...grpc.CallOption) (*CheckPromqlExprResponse, error)
	EnableSwitchMonitorAlertRule(ctx context.Context, in *EnableSwitchMonitorAlertRuleRequest, opts ...grpc.CallOption) (*EnableSwitchMonitorAlertRuleResponse, error)
	BatchEnableSwitchMonitorAlertRule(ctx context.Context, in *BatchEnableSwitchMonitorAlertRuleRequest, opts ...grpc.CallOption) (*BatchEnableSwitchMonitorAlertRuleResponse, error)
	BatchDeleteMonitorAlertRule(ctx context.Context, in *BatchDeleteMonitorAlertRuleRequest, opts ...grpc.CallOption) (*BatchDeleteMonitorAlertRuleResponse, error)
}

type prometheusRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusRpcClient(cc grpc.ClientConnInterface) PrometheusRpcClient {
	return &prometheusRpcClient{cc}
}

func (c *prometheusRpcClient) GetMonitorScrapePoolList(ctx context.Context, in *GetMonitorScrapePoolListRequest, opts ...grpc.CallOption) (*GetMonitorScrapePoolListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonitorScrapePoolListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorScrapePoolList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorScrapePool(ctx context.Context, in *CreateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*CreateMonitorScrapePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorScrapePoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorScrapePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorScrapePool(ctx context.Context, in *UpdateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorScrapePoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorScrapePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorScrapePool(ctx context.Context, in *DeleteMonitorScrapePoolRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorScrapePoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorScrapePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetMonitorAlertManagerPoolList(ctx context.Context, in *GetAlertManagerPoolListRequest, opts ...grpc.CallOption) (*GetAlertManagerPoolListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertManagerPoolListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorAlertManagerPoolList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorAlertManagerPool(ctx context.Context, in *CreateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*CreateMonitorAlertManagerPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorAlertManagerPoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorAlertManagerPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorAlertManagerPool(ctx context.Context, in *UpdateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*UpdateMonitorAlertManagerPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorAlertManagerPoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorAlertManagerPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorAlertManagerPool(ctx context.Context, in *DeleteMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*DeleteMonitorAlertManagerPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorAlertManagerPoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorAlertManagerPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetMonitorScrapeJobList(ctx context.Context, in *GetMonitorScrapeJobListRequest, opts ...grpc.CallOption) (*GetMonitorScrapeJobListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonitorScrapeJobListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorScrapeJobList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorScrapeJob(ctx context.Context, in *CreateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*CreateMonitorScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorScrapeJobResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorScrapeJob(ctx context.Context, in *UpdateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorScrapeJobResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorScrapeJob(ctx context.Context, in *DeleteMonitorScrapeJobRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorScrapeJobResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetMonitorAlertRuleList(ctx context.Context, in *GetMonitorAlertRuleListRequest, opts ...grpc.CallOption) (*GetMonitorAlertRuleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonitorAlertRuleListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorAlertRuleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorAlertRule(ctx context.Context, in *CreateMonitorAlertRuleRequest, opts ...grpc.CallOption) (*CreateMonitorAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorAlertRule(ctx context.Context, in *UpdateMonitorAlertRuleRequest, opts ...grpc.CallOption) (*UpdateMonitorAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorAlertRule(ctx context.Context, in *DeleteMonitorAlertRuleRequest, opts ...grpc.CallOption) (*DeleteMonitorAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CheckPromqlExpr(ctx context.Context, in *CheckPromqlExprRequest, opts ...grpc.CallOption) (*CheckPromqlExprResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPromqlExprResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CheckPromqlExpr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) EnableSwitchMonitorAlertRule(ctx context.Context, in *EnableSwitchMonitorAlertRuleRequest, opts ...grpc.CallOption) (*EnableSwitchMonitorAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableSwitchMonitorAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_EnableSwitchMonitorAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) BatchEnableSwitchMonitorAlertRule(ctx context.Context, in *BatchEnableSwitchMonitorAlertRuleRequest, opts ...grpc.CallOption) (*BatchEnableSwitchMonitorAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchEnableSwitchMonitorAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_BatchEnableSwitchMonitorAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) BatchDeleteMonitorAlertRule(ctx context.Context, in *BatchDeleteMonitorAlertRuleRequest, opts ...grpc.CallOption) (*BatchDeleteMonitorAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteMonitorAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_BatchDeleteMonitorAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrometheusRpcServer is the server API for PrometheusRpc service.
// All implementations must embed UnimplementedPrometheusRpcServer
// for forward compatibility.
type PrometheusRpcServer interface {
	// scrapePool 采集池
	GetMonitorScrapePoolList(context.Context, *GetMonitorScrapePoolListRequest) (*GetMonitorScrapePoolListResponse, error)
	CreateMonitorScrapePool(context.Context, *CreateMonitorScrapePoolRequest) (*CreateMonitorScrapePoolResponse, error)
	UpdateMonitorScrapePool(context.Context, *UpdateMonitorScrapePoolRequest) (*UpdateMonitorScrapePoolResponse, error)
	DeleteMonitorScrapePool(context.Context, *DeleteMonitorScrapePoolRequest) (*DeleteMonitorScrapePoolResponse, error)
	// alertmanagerPool 告警池
	GetMonitorAlertManagerPoolList(context.Context, *GetAlertManagerPoolListRequest) (*GetAlertManagerPoolListResponse, error)
	CreateMonitorAlertManagerPool(context.Context, *CreateMonitorAlertManagerPoolRequest) (*CreateMonitorAlertManagerPoolResponse, error)
	UpdateMonitorAlertManagerPool(context.Context, *UpdateMonitorAlertManagerPoolRequest) (*UpdateMonitorAlertManagerPoolResponse, error)
	DeleteMonitorAlertManagerPool(context.Context, *DeleteMonitorAlertManagerPoolRequest) (*DeleteMonitorAlertManagerPoolResponse, error)
	// scrapeJob 采集任务
	GetMonitorScrapeJobList(context.Context, *GetMonitorScrapeJobListRequest) (*GetMonitorScrapeJobListResponse, error)
	CreateMonitorScrapeJob(context.Context, *CreateMonitorScrapeJobRequest) (*CreateMonitorScrapeJobResponse, error)
	UpdateMonitorScrapeJob(context.Context, *UpdateMonitorScrapeJobRequest) (*UpdateMonitorScrapeJobResponse, error)
	DeleteMonitorScrapeJob(context.Context, *DeleteMonitorScrapeJobRequest) (*DeleteMonitorScrapeJobResponse, error)
	// alertRule 告警规则
	GetMonitorAlertRuleList(context.Context, *GetMonitorAlertRuleListRequest) (*GetMonitorAlertRuleListResponse, error)
	CreateMonitorAlertRule(context.Context, *CreateMonitorAlertRuleRequest) (*CreateMonitorAlertRuleResponse, error)
	UpdateMonitorAlertRule(context.Context, *UpdateMonitorAlertRuleRequest) (*UpdateMonitorAlertRuleResponse, error)
	DeleteMonitorAlertRule(context.Context, *DeleteMonitorAlertRuleRequest) (*DeleteMonitorAlertRuleResponse, error)
	CheckPromqlExpr(context.Context, *CheckPromqlExprRequest) (*CheckPromqlExprResponse, error)
	EnableSwitchMonitorAlertRule(context.Context, *EnableSwitchMonitorAlertRuleRequest) (*EnableSwitchMonitorAlertRuleResponse, error)
	BatchEnableSwitchMonitorAlertRule(context.Context, *BatchEnableSwitchMonitorAlertRuleRequest) (*BatchEnableSwitchMonitorAlertRuleResponse, error)
	BatchDeleteMonitorAlertRule(context.Context, *BatchDeleteMonitorAlertRuleRequest) (*BatchDeleteMonitorAlertRuleResponse, error)
	mustEmbedUnimplementedPrometheusRpcServer()
}

// UnimplementedPrometheusRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrometheusRpcServer struct{}

func (UnimplementedPrometheusRpcServer) GetMonitorScrapePoolList(context.Context, *GetMonitorScrapePoolListRequest) (*GetMonitorScrapePoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorScrapePoolList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorScrapePool(context.Context, *CreateMonitorScrapePoolRequest) (*CreateMonitorScrapePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorScrapePool not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorScrapePool(context.Context, *UpdateMonitorScrapePoolRequest) (*UpdateMonitorScrapePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorScrapePool not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorScrapePool(context.Context, *DeleteMonitorScrapePoolRequest) (*DeleteMonitorScrapePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorScrapePool not implemented")
}
func (UnimplementedPrometheusRpcServer) GetMonitorAlertManagerPoolList(context.Context, *GetAlertManagerPoolListRequest) (*GetAlertManagerPoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorAlertManagerPoolList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorAlertManagerPool(context.Context, *CreateMonitorAlertManagerPoolRequest) (*CreateMonitorAlertManagerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorAlertManagerPool not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorAlertManagerPool(context.Context, *UpdateMonitorAlertManagerPoolRequest) (*UpdateMonitorAlertManagerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorAlertManagerPool not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorAlertManagerPool(context.Context, *DeleteMonitorAlertManagerPoolRequest) (*DeleteMonitorAlertManagerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorAlertManagerPool not implemented")
}
func (UnimplementedPrometheusRpcServer) GetMonitorScrapeJobList(context.Context, *GetMonitorScrapeJobListRequest) (*GetMonitorScrapeJobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorScrapeJobList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorScrapeJob(context.Context, *CreateMonitorScrapeJobRequest) (*CreateMonitorScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorScrapeJob not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorScrapeJob(context.Context, *UpdateMonitorScrapeJobRequest) (*UpdateMonitorScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorScrapeJob not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorScrapeJob(context.Context, *DeleteMonitorScrapeJobRequest) (*DeleteMonitorScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorScrapeJob not implemented")
}
func (UnimplementedPrometheusRpcServer) GetMonitorAlertRuleList(context.Context, *GetMonitorAlertRuleListRequest) (*GetMonitorAlertRuleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorAlertRuleList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorAlertRule(context.Context, *CreateMonitorAlertRuleRequest) (*CreateMonitorAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorAlertRule(context.Context, *UpdateMonitorAlertRuleRequest) (*UpdateMonitorAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorAlertRule(context.Context, *DeleteMonitorAlertRuleRequest) (*DeleteMonitorAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) CheckPromqlExpr(context.Context, *CheckPromqlExprRequest) (*CheckPromqlExprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPromqlExpr not implemented")
}
func (UnimplementedPrometheusRpcServer) EnableSwitchMonitorAlertRule(context.Context, *EnableSwitchMonitorAlertRuleRequest) (*EnableSwitchMonitorAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSwitchMonitorAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) BatchEnableSwitchMonitorAlertRule(context.Context, *BatchEnableSwitchMonitorAlertRuleRequest) (*BatchEnableSwitchMonitorAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEnableSwitchMonitorAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) BatchDeleteMonitorAlertRule(context.Context, *BatchDeleteMonitorAlertRuleRequest) (*BatchDeleteMonitorAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteMonitorAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) mustEmbedUnimplementedPrometheusRpcServer() {}
func (UnimplementedPrometheusRpcServer) testEmbeddedByValue()                       {}

// UnsafePrometheusRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusRpcServer will
// result in compilation errors.
type UnsafePrometheusRpcServer interface {
	mustEmbedUnimplementedPrometheusRpcServer()
}

func RegisterPrometheusRpcServer(s grpc.ServiceRegistrar, srv PrometheusRpcServer) {
	// If the following call pancis, it indicates UnimplementedPrometheusRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrometheusRpc_ServiceDesc, srv)
}

func _PrometheusRpc_GetMonitorScrapePoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorScrapePoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorScrapePoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorScrapePoolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorScrapePoolList(ctx, req.(*GetMonitorScrapePoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorScrapePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorScrapePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorScrapePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorScrapePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorScrapePool(ctx, req.(*CreateMonitorScrapePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorScrapePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorScrapePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorScrapePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapePool(ctx, req.(*UpdateMonitorScrapePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorScrapePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorScrapePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorScrapePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapePool(ctx, req.(*DeleteMonitorScrapePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetMonitorAlertManagerPoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertManagerPoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorAlertManagerPoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorAlertManagerPoolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorAlertManagerPoolList(ctx, req.(*GetAlertManagerPoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorAlertManagerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorAlertManagerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorAlertManagerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorAlertManagerPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorAlertManagerPool(ctx, req.(*CreateMonitorAlertManagerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorAlertManagerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorAlertManagerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorAlertManagerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorAlertManagerPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorAlertManagerPool(ctx, req.(*UpdateMonitorAlertManagerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorAlertManagerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorAlertManagerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorAlertManagerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorAlertManagerPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorAlertManagerPool(ctx, req.(*DeleteMonitorAlertManagerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetMonitorScrapeJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorScrapeJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorScrapeJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorScrapeJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorScrapeJobList(ctx, req.(*GetMonitorScrapeJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorScrapeJob(ctx, req.(*CreateMonitorScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapeJob(ctx, req.(*UpdateMonitorScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapeJob(ctx, req.(*DeleteMonitorScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetMonitorAlertRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorAlertRuleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorAlertRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorAlertRuleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorAlertRuleList(ctx, req.(*GetMonitorAlertRuleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorAlertRule(ctx, req.(*CreateMonitorAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorAlertRule(ctx, req.(*UpdateMonitorAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorAlertRule(ctx, req.(*DeleteMonitorAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CheckPromqlExpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPromqlExprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CheckPromqlExpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CheckPromqlExpr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CheckPromqlExpr(ctx, req.(*CheckPromqlExprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_EnableSwitchMonitorAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSwitchMonitorAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).EnableSwitchMonitorAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_EnableSwitchMonitorAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).EnableSwitchMonitorAlertRule(ctx, req.(*EnableSwitchMonitorAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_BatchEnableSwitchMonitorAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEnableSwitchMonitorAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).BatchEnableSwitchMonitorAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_BatchEnableSwitchMonitorAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).BatchEnableSwitchMonitorAlertRule(ctx, req.(*BatchEnableSwitchMonitorAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_BatchDeleteMonitorAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteMonitorAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).BatchDeleteMonitorAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_BatchDeleteMonitorAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).BatchDeleteMonitorAlertRule(ctx, req.(*BatchDeleteMonitorAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrometheusRpc_ServiceDesc is the grpc.ServiceDesc for PrometheusRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrometheusRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prometheus_rpc.Prometheus_rpc",
	HandlerType: (*PrometheusRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonitorScrapePoolList",
			Handler:    _PrometheusRpc_GetMonitorScrapePoolList_Handler,
		},
		{
			MethodName: "CreateMonitorScrapePool",
			Handler:    _PrometheusRpc_CreateMonitorScrapePool_Handler,
		},
		{
			MethodName: "UpdateMonitorScrapePool",
			Handler:    _PrometheusRpc_UpdateMonitorScrapePool_Handler,
		},
		{
			MethodName: "DeleteMonitorScrapePool",
			Handler:    _PrometheusRpc_DeleteMonitorScrapePool_Handler,
		},
		{
			MethodName: "GetMonitorAlertManagerPoolList",
			Handler:    _PrometheusRpc_GetMonitorAlertManagerPoolList_Handler,
		},
		{
			MethodName: "CreateMonitorAlertManagerPool",
			Handler:    _PrometheusRpc_CreateMonitorAlertManagerPool_Handler,
		},
		{
			MethodName: "UpdateMonitorAlertManagerPool",
			Handler:    _PrometheusRpc_UpdateMonitorAlertManagerPool_Handler,
		},
		{
			MethodName: "DeleteMonitorAlertManagerPool",
			Handler:    _PrometheusRpc_DeleteMonitorAlertManagerPool_Handler,
		},
		{
			MethodName: "GetMonitorScrapeJobList",
			Handler:    _PrometheusRpc_GetMonitorScrapeJobList_Handler,
		},
		{
			MethodName: "CreateMonitorScrapeJob",
			Handler:    _PrometheusRpc_CreateMonitorScrapeJob_Handler,
		},
		{
			MethodName: "UpdateMonitorScrapeJob",
			Handler:    _PrometheusRpc_UpdateMonitorScrapeJob_Handler,
		},
		{
			MethodName: "DeleteMonitorScrapeJob",
			Handler:    _PrometheusRpc_DeleteMonitorScrapeJob_Handler,
		},
		{
			MethodName: "GetMonitorAlertRuleList",
			Handler:    _PrometheusRpc_GetMonitorAlertRuleList_Handler,
		},
		{
			MethodName: "CreateMonitorAlertRule",
			Handler:    _PrometheusRpc_CreateMonitorAlertRule_Handler,
		},
		{
			MethodName: "UpdateMonitorAlertRule",
			Handler:    _PrometheusRpc_UpdateMonitorAlertRule_Handler,
		},
		{
			MethodName: "DeleteMonitorAlertRule",
			Handler:    _PrometheusRpc_DeleteMonitorAlertRule_Handler,
		},
		{
			MethodName: "CheckPromqlExpr",
			Handler:    _PrometheusRpc_CheckPromqlExpr_Handler,
		},
		{
			MethodName: "EnableSwitchMonitorAlertRule",
			Handler:    _PrometheusRpc_EnableSwitchMonitorAlertRule_Handler,
		},
		{
			MethodName: "BatchEnableSwitchMonitorAlertRule",
			Handler:    _PrometheusRpc_BatchEnableSwitchMonitorAlertRule_Handler,
		},
		{
			MethodName: "BatchDeleteMonitorAlertRule",
			Handler:    _PrometheusRpc_BatchDeleteMonitorAlertRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prometheus_rpc.proto",
}
