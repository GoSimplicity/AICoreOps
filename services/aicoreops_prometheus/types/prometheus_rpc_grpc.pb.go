// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: prometheus_rpc.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrometheusRpc_GetMonitorScrapePoolList_FullMethodName       = "/prometheus_rpc.Prometheus_rpc/GetMonitorScrapePoolList"
	PrometheusRpc_CreateMonitorScrapePool_FullMethodName        = "/prometheus_rpc.Prometheus_rpc/CreateMonitorScrapePool"
	PrometheusRpc_UpdateMonitorScrapePool_FullMethodName        = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorScrapePool"
	PrometheusRpc_DeleteMonitorScrapePool_FullMethodName        = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorScrapePool"
	PrometheusRpc_GetMonitorAlertManagerPoolList_FullMethodName = "/prometheus_rpc.Prometheus_rpc/GetMonitorAlertManagerPoolList"
	PrometheusRpc_CreateMonitorAlertManagerPool_FullMethodName  = "/prometheus_rpc.Prometheus_rpc/CreateMonitorAlertManagerPool"
	PrometheusRpc_UpdateMonitorAlertManagerPool_FullMethodName  = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorAlertManagerPool"
	PrometheusRpc_DeleteMonitorAlertManagerPool_FullMethodName  = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorAlertManagerPool"
	PrometheusRpc_GetMonitorScrapeJobList_FullMethodName        = "/prometheus_rpc.Prometheus_rpc/GetMonitorScrapeJobList"
	PrometheusRpc_CreateMonitorScrapeJob_FullMethodName         = "/prometheus_rpc.Prometheus_rpc/CreateMonitorScrapeJob"
	PrometheusRpc_UpdateMonitorScrapeJob_FullMethodName         = "/prometheus_rpc.Prometheus_rpc/UpdateMonitorScrapeJob"
	PrometheusRpc_DeleteMonitorScrapeJob_FullMethodName         = "/prometheus_rpc.Prometheus_rpc/DeleteMonitorScrapeJob"
	PrometheusRpc_GetAlertRuleList_FullMethodName               = "/prometheus_rpc.Prometheus_rpc/GetAlertRuleList"
	PrometheusRpc_CreateAlertRule_FullMethodName                = "/prometheus_rpc.Prometheus_rpc/CreateAlertRule"
	PrometheusRpc_UpdateAlertRule_FullMethodName                = "/prometheus_rpc.Prometheus_rpc/UpdateAlertRule"
	PrometheusRpc_DeleteAlertRule_FullMethodName                = "/prometheus_rpc.Prometheus_rpc/DeleteAlertRule"
	PrometheusRpc_CheckPromqlExpr_FullMethodName                = "/prometheus_rpc.Prometheus_rpc/CheckPromqlExpr"
	PrometheusRpc_EnableSwitchAlertRule_FullMethodName          = "/prometheus_rpc.Prometheus_rpc/EnableSwitchAlertRule"
	PrometheusRpc_BatchEnableSwitchAlertRule_FullMethodName     = "/prometheus_rpc.Prometheus_rpc/BatchEnableSwitchAlertRule"
	PrometheusRpc_BatchDeleteAlertRule_FullMethodName           = "/prometheus_rpc.Prometheus_rpc/BatchDeleteAlertRule"
	PrometheusRpc_GetRecordRuleList_FullMethodName              = "/prometheus_rpc.Prometheus_rpc/GetRecordRuleList"
	PrometheusRpc_CreateRecordRule_FullMethodName               = "/prometheus_rpc.Prometheus_rpc/CreateRecordRule"
	PrometheusRpc_UpdateRecordRule_FullMethodName               = "/prometheus_rpc.Prometheus_rpc/UpdateRecordRule"
	PrometheusRpc_DeleteRecordRule_FullMethodName               = "/prometheus_rpc.Prometheus_rpc/DeleteRecordRule"
	PrometheusRpc_EnableSwitchRecordRule_FullMethodName         = "/prometheus_rpc.Prometheus_rpc/EnableSwitchRecordRule"
	PrometheusRpc_BatchEnableSwitchRecordRule_FullMethodName    = "/prometheus_rpc.Prometheus_rpc/BatchEnableSwitchRecordRule"
	PrometheusRpc_BatchDeleteRecordRule_FullMethodName          = "/prometheus_rpc.Prometheus_rpc/BatchDeleteRecordRule"
)

// PrometheusRpcClient is the client API for PrometheusRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusRpcClient interface {
	// scrapePool 采集池
	GetMonitorScrapePoolList(ctx context.Context, in *GetMonitorScrapePoolListRequest, opts ...grpc.CallOption) (*GetMonitorScrapePoolListResponse, error)
	CreateMonitorScrapePool(ctx context.Context, in *CreateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*CreateMonitorScrapePoolResponse, error)
	UpdateMonitorScrapePool(ctx context.Context, in *UpdateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapePoolResponse, error)
	DeleteMonitorScrapePool(ctx context.Context, in *DeleteMonitorScrapePoolRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapePoolResponse, error)
	// alertmanagerPool 告警池
	GetMonitorAlertManagerPoolList(ctx context.Context, in *GetAlertManagerPoolListRequest, opts ...grpc.CallOption) (*GetAlertManagerPoolListResponse, error)
	CreateMonitorAlertManagerPool(ctx context.Context, in *CreateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*CreateMonitorAlertManagerPoolResponse, error)
	UpdateMonitorAlertManagerPool(ctx context.Context, in *UpdateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*UpdateMonitorAlertManagerPoolResponse, error)
	DeleteMonitorAlertManagerPool(ctx context.Context, in *DeleteMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*DeleteMonitorAlertManagerPoolResponse, error)
	// scrapeJob 采集任务
	GetMonitorScrapeJobList(ctx context.Context, in *GetMonitorScrapeJobListRequest, opts ...grpc.CallOption) (*GetMonitorScrapeJobListResponse, error)
	CreateMonitorScrapeJob(ctx context.Context, in *CreateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*CreateMonitorScrapeJobResponse, error)
	UpdateMonitorScrapeJob(ctx context.Context, in *UpdateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapeJobResponse, error)
	DeleteMonitorScrapeJob(ctx context.Context, in *DeleteMonitorScrapeJobRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapeJobResponse, error)
	// alertRule 告警规则
	GetAlertRuleList(ctx context.Context, in *GetAlertRuleListRequest, opts ...grpc.CallOption) (*GetAlertRuleListResponse, error)
	CreateAlertRule(ctx context.Context, in *CreateAlertRuleRequest, opts ...grpc.CallOption) (*CreateAlertRuleResponse, error)
	UpdateAlertRule(ctx context.Context, in *UpdateAlertRuleRequest, opts ...grpc.CallOption) (*UpdateAlertRuleResponse, error)
	DeleteAlertRule(ctx context.Context, in *DeleteAlertRuleRequest, opts ...grpc.CallOption) (*DeleteAlertRuleResponse, error)
	CheckPromqlExpr(ctx context.Context, in *CheckPromqlExprRequest, opts ...grpc.CallOption) (*CheckPromqlExprResponse, error)
	EnableSwitchAlertRule(ctx context.Context, in *EnableSwitchAlertRuleRequest, opts ...grpc.CallOption) (*EnableSwitchAlertRuleResponse, error)
	BatchEnableSwitchAlertRule(ctx context.Context, in *BatchEnableSwitchAlertRuleRequest, opts ...grpc.CallOption) (*BatchEnableSwitchAlertRuleResponse, error)
	BatchDeleteAlertRule(ctx context.Context, in *BatchDeleteAlertRuleRequest, opts ...grpc.CallOption) (*BatchDeleteAlertRuleResponse, error)
	// recordRule 预聚合规则
	GetRecordRuleList(ctx context.Context, in *GetRecordRuleListRequest, opts ...grpc.CallOption) (*GetRecordRuleListResponse, error)
	CreateRecordRule(ctx context.Context, in *CreateRecordRuleRequest, opts ...grpc.CallOption) (*CreateRecordRuleResponse, error)
	UpdateRecordRule(ctx context.Context, in *UpdateRecordRuleRequest, opts ...grpc.CallOption) (*UpdateRecordRuleResponse, error)
	DeleteRecordRule(ctx context.Context, in *DeleteRecordRuleRequest, opts ...grpc.CallOption) (*DeleteRecordRuleResponse, error)
	EnableSwitchRecordRule(ctx context.Context, in *EnableSwitchRecordRuleRequest, opts ...grpc.CallOption) (*EnableSwitchRecordRuleResponse, error)
	BatchEnableSwitchRecordRule(ctx context.Context, in *BatchEnableSwitchRecordRuleRequest, opts ...grpc.CallOption) (*BatchEnableSwitchRecordRuleResponse, error)
	BatchDeleteRecordRule(ctx context.Context, in *BatchDeleteRecordRuleRequest, opts ...grpc.CallOption) (*BatchDeleteRecordRuleResponse, error)
}

type prometheusRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusRpcClient(cc grpc.ClientConnInterface) PrometheusRpcClient {
	return &prometheusRpcClient{cc}
}

func (c *prometheusRpcClient) GetMonitorScrapePoolList(ctx context.Context, in *GetMonitorScrapePoolListRequest, opts ...grpc.CallOption) (*GetMonitorScrapePoolListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonitorScrapePoolListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorScrapePoolList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorScrapePool(ctx context.Context, in *CreateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*CreateMonitorScrapePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorScrapePoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorScrapePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorScrapePool(ctx context.Context, in *UpdateMonitorScrapePoolRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorScrapePoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorScrapePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorScrapePool(ctx context.Context, in *DeleteMonitorScrapePoolRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorScrapePoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorScrapePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetMonitorAlertManagerPoolList(ctx context.Context, in *GetAlertManagerPoolListRequest, opts ...grpc.CallOption) (*GetAlertManagerPoolListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertManagerPoolListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorAlertManagerPoolList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorAlertManagerPool(ctx context.Context, in *CreateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*CreateMonitorAlertManagerPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorAlertManagerPoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorAlertManagerPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorAlertManagerPool(ctx context.Context, in *UpdateMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*UpdateMonitorAlertManagerPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorAlertManagerPoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorAlertManagerPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorAlertManagerPool(ctx context.Context, in *DeleteMonitorAlertManagerPoolRequest, opts ...grpc.CallOption) (*DeleteMonitorAlertManagerPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorAlertManagerPoolResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorAlertManagerPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetMonitorScrapeJobList(ctx context.Context, in *GetMonitorScrapeJobListRequest, opts ...grpc.CallOption) (*GetMonitorScrapeJobListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonitorScrapeJobListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetMonitorScrapeJobList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateMonitorScrapeJob(ctx context.Context, in *CreateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*CreateMonitorScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMonitorScrapeJobResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateMonitorScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateMonitorScrapeJob(ctx context.Context, in *UpdateMonitorScrapeJobRequest, opts ...grpc.CallOption) (*UpdateMonitorScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitorScrapeJobResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateMonitorScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteMonitorScrapeJob(ctx context.Context, in *DeleteMonitorScrapeJobRequest, opts ...grpc.CallOption) (*DeleteMonitorScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMonitorScrapeJobResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteMonitorScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetAlertRuleList(ctx context.Context, in *GetAlertRuleListRequest, opts ...grpc.CallOption) (*GetAlertRuleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertRuleListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetAlertRuleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateAlertRule(ctx context.Context, in *CreateAlertRuleRequest, opts ...grpc.CallOption) (*CreateAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateAlertRule(ctx context.Context, in *UpdateAlertRuleRequest, opts ...grpc.CallOption) (*UpdateAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteAlertRule(ctx context.Context, in *DeleteAlertRuleRequest, opts ...grpc.CallOption) (*DeleteAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CheckPromqlExpr(ctx context.Context, in *CheckPromqlExprRequest, opts ...grpc.CallOption) (*CheckPromqlExprResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPromqlExprResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CheckPromqlExpr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) EnableSwitchAlertRule(ctx context.Context, in *EnableSwitchAlertRuleRequest, opts ...grpc.CallOption) (*EnableSwitchAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableSwitchAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_EnableSwitchAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) BatchEnableSwitchAlertRule(ctx context.Context, in *BatchEnableSwitchAlertRuleRequest, opts ...grpc.CallOption) (*BatchEnableSwitchAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchEnableSwitchAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_BatchEnableSwitchAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) BatchDeleteAlertRule(ctx context.Context, in *BatchDeleteAlertRuleRequest, opts ...grpc.CallOption) (*BatchDeleteAlertRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteAlertRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_BatchDeleteAlertRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) GetRecordRuleList(ctx context.Context, in *GetRecordRuleListRequest, opts ...grpc.CallOption) (*GetRecordRuleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordRuleListResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_GetRecordRuleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) CreateRecordRule(ctx context.Context, in *CreateRecordRuleRequest, opts ...grpc.CallOption) (*CreateRecordRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRecordRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_CreateRecordRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) UpdateRecordRule(ctx context.Context, in *UpdateRecordRuleRequest, opts ...grpc.CallOption) (*UpdateRecordRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecordRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_UpdateRecordRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) DeleteRecordRule(ctx context.Context, in *DeleteRecordRuleRequest, opts ...grpc.CallOption) (*DeleteRecordRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecordRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_DeleteRecordRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) EnableSwitchRecordRule(ctx context.Context, in *EnableSwitchRecordRuleRequest, opts ...grpc.CallOption) (*EnableSwitchRecordRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableSwitchRecordRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_EnableSwitchRecordRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) BatchEnableSwitchRecordRule(ctx context.Context, in *BatchEnableSwitchRecordRuleRequest, opts ...grpc.CallOption) (*BatchEnableSwitchRecordRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchEnableSwitchRecordRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_BatchEnableSwitchRecordRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusRpcClient) BatchDeleteRecordRule(ctx context.Context, in *BatchDeleteRecordRuleRequest, opts ...grpc.CallOption) (*BatchDeleteRecordRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteRecordRuleResponse)
	err := c.cc.Invoke(ctx, PrometheusRpc_BatchDeleteRecordRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrometheusRpcServer is the server API for PrometheusRpc service.
// All implementations must embed UnimplementedPrometheusRpcServer
// for forward compatibility.
type PrometheusRpcServer interface {
	// scrapePool 采集池
	GetMonitorScrapePoolList(context.Context, *GetMonitorScrapePoolListRequest) (*GetMonitorScrapePoolListResponse, error)
	CreateMonitorScrapePool(context.Context, *CreateMonitorScrapePoolRequest) (*CreateMonitorScrapePoolResponse, error)
	UpdateMonitorScrapePool(context.Context, *UpdateMonitorScrapePoolRequest) (*UpdateMonitorScrapePoolResponse, error)
	DeleteMonitorScrapePool(context.Context, *DeleteMonitorScrapePoolRequest) (*DeleteMonitorScrapePoolResponse, error)
	// alertmanagerPool 告警池
	GetMonitorAlertManagerPoolList(context.Context, *GetAlertManagerPoolListRequest) (*GetAlertManagerPoolListResponse, error)
	CreateMonitorAlertManagerPool(context.Context, *CreateMonitorAlertManagerPoolRequest) (*CreateMonitorAlertManagerPoolResponse, error)
	UpdateMonitorAlertManagerPool(context.Context, *UpdateMonitorAlertManagerPoolRequest) (*UpdateMonitorAlertManagerPoolResponse, error)
	DeleteMonitorAlertManagerPool(context.Context, *DeleteMonitorAlertManagerPoolRequest) (*DeleteMonitorAlertManagerPoolResponse, error)
	// scrapeJob 采集任务
	GetMonitorScrapeJobList(context.Context, *GetMonitorScrapeJobListRequest) (*GetMonitorScrapeJobListResponse, error)
	CreateMonitorScrapeJob(context.Context, *CreateMonitorScrapeJobRequest) (*CreateMonitorScrapeJobResponse, error)
	UpdateMonitorScrapeJob(context.Context, *UpdateMonitorScrapeJobRequest) (*UpdateMonitorScrapeJobResponse, error)
	DeleteMonitorScrapeJob(context.Context, *DeleteMonitorScrapeJobRequest) (*DeleteMonitorScrapeJobResponse, error)
	// alertRule 告警规则
	GetAlertRuleList(context.Context, *GetAlertRuleListRequest) (*GetAlertRuleListResponse, error)
	CreateAlertRule(context.Context, *CreateAlertRuleRequest) (*CreateAlertRuleResponse, error)
	UpdateAlertRule(context.Context, *UpdateAlertRuleRequest) (*UpdateAlertRuleResponse, error)
	DeleteAlertRule(context.Context, *DeleteAlertRuleRequest) (*DeleteAlertRuleResponse, error)
	CheckPromqlExpr(context.Context, *CheckPromqlExprRequest) (*CheckPromqlExprResponse, error)
	EnableSwitchAlertRule(context.Context, *EnableSwitchAlertRuleRequest) (*EnableSwitchAlertRuleResponse, error)
	BatchEnableSwitchAlertRule(context.Context, *BatchEnableSwitchAlertRuleRequest) (*BatchEnableSwitchAlertRuleResponse, error)
	BatchDeleteAlertRule(context.Context, *BatchDeleteAlertRuleRequest) (*BatchDeleteAlertRuleResponse, error)
	// recordRule 预聚合规则
	GetRecordRuleList(context.Context, *GetRecordRuleListRequest) (*GetRecordRuleListResponse, error)
	CreateRecordRule(context.Context, *CreateRecordRuleRequest) (*CreateRecordRuleResponse, error)
	UpdateRecordRule(context.Context, *UpdateRecordRuleRequest) (*UpdateRecordRuleResponse, error)
	DeleteRecordRule(context.Context, *DeleteRecordRuleRequest) (*DeleteRecordRuleResponse, error)
	EnableSwitchRecordRule(context.Context, *EnableSwitchRecordRuleRequest) (*EnableSwitchRecordRuleResponse, error)
	BatchEnableSwitchRecordRule(context.Context, *BatchEnableSwitchRecordRuleRequest) (*BatchEnableSwitchRecordRuleResponse, error)
	BatchDeleteRecordRule(context.Context, *BatchDeleteRecordRuleRequest) (*BatchDeleteRecordRuleResponse, error)
	mustEmbedUnimplementedPrometheusRpcServer()
}

// UnimplementedPrometheusRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrometheusRpcServer struct{}

func (UnimplementedPrometheusRpcServer) GetMonitorScrapePoolList(context.Context, *GetMonitorScrapePoolListRequest) (*GetMonitorScrapePoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorScrapePoolList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorScrapePool(context.Context, *CreateMonitorScrapePoolRequest) (*CreateMonitorScrapePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorScrapePool not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorScrapePool(context.Context, *UpdateMonitorScrapePoolRequest) (*UpdateMonitorScrapePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorScrapePool not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorScrapePool(context.Context, *DeleteMonitorScrapePoolRequest) (*DeleteMonitorScrapePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorScrapePool not implemented")
}
func (UnimplementedPrometheusRpcServer) GetMonitorAlertManagerPoolList(context.Context, *GetAlertManagerPoolListRequest) (*GetAlertManagerPoolListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorAlertManagerPoolList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorAlertManagerPool(context.Context, *CreateMonitorAlertManagerPoolRequest) (*CreateMonitorAlertManagerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorAlertManagerPool not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorAlertManagerPool(context.Context, *UpdateMonitorAlertManagerPoolRequest) (*UpdateMonitorAlertManagerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorAlertManagerPool not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorAlertManagerPool(context.Context, *DeleteMonitorAlertManagerPoolRequest) (*DeleteMonitorAlertManagerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorAlertManagerPool not implemented")
}
func (UnimplementedPrometheusRpcServer) GetMonitorScrapeJobList(context.Context, *GetMonitorScrapeJobListRequest) (*GetMonitorScrapeJobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorScrapeJobList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateMonitorScrapeJob(context.Context, *CreateMonitorScrapeJobRequest) (*CreateMonitorScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorScrapeJob not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateMonitorScrapeJob(context.Context, *UpdateMonitorScrapeJobRequest) (*UpdateMonitorScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorScrapeJob not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteMonitorScrapeJob(context.Context, *DeleteMonitorScrapeJobRequest) (*DeleteMonitorScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorScrapeJob not implemented")
}
func (UnimplementedPrometheusRpcServer) GetAlertRuleList(context.Context, *GetAlertRuleListRequest) (*GetAlertRuleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRuleList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateAlertRule(context.Context, *CreateAlertRuleRequest) (*CreateAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateAlertRule(context.Context, *UpdateAlertRuleRequest) (*UpdateAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteAlertRule(context.Context, *DeleteAlertRuleRequest) (*DeleteAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) CheckPromqlExpr(context.Context, *CheckPromqlExprRequest) (*CheckPromqlExprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPromqlExpr not implemented")
}
func (UnimplementedPrometheusRpcServer) EnableSwitchAlertRule(context.Context, *EnableSwitchAlertRuleRequest) (*EnableSwitchAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSwitchAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) BatchEnableSwitchAlertRule(context.Context, *BatchEnableSwitchAlertRuleRequest) (*BatchEnableSwitchAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEnableSwitchAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) BatchDeleteAlertRule(context.Context, *BatchDeleteAlertRuleRequest) (*BatchDeleteAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteAlertRule not implemented")
}
func (UnimplementedPrometheusRpcServer) GetRecordRuleList(context.Context, *GetRecordRuleListRequest) (*GetRecordRuleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordRuleList not implemented")
}
func (UnimplementedPrometheusRpcServer) CreateRecordRule(context.Context, *CreateRecordRuleRequest) (*CreateRecordRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecordRule not implemented")
}
func (UnimplementedPrometheusRpcServer) UpdateRecordRule(context.Context, *UpdateRecordRuleRequest) (*UpdateRecordRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordRule not implemented")
}
func (UnimplementedPrometheusRpcServer) DeleteRecordRule(context.Context, *DeleteRecordRuleRequest) (*DeleteRecordRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordRule not implemented")
}
func (UnimplementedPrometheusRpcServer) EnableSwitchRecordRule(context.Context, *EnableSwitchRecordRuleRequest) (*EnableSwitchRecordRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSwitchRecordRule not implemented")
}
func (UnimplementedPrometheusRpcServer) BatchEnableSwitchRecordRule(context.Context, *BatchEnableSwitchRecordRuleRequest) (*BatchEnableSwitchRecordRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEnableSwitchRecordRule not implemented")
}
func (UnimplementedPrometheusRpcServer) BatchDeleteRecordRule(context.Context, *BatchDeleteRecordRuleRequest) (*BatchDeleteRecordRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteRecordRule not implemented")
}
func (UnimplementedPrometheusRpcServer) mustEmbedUnimplementedPrometheusRpcServer() {}
func (UnimplementedPrometheusRpcServer) testEmbeddedByValue()                       {}

// UnsafePrometheusRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusRpcServer will
// result in compilation errors.
type UnsafePrometheusRpcServer interface {
	mustEmbedUnimplementedPrometheusRpcServer()
}

func RegisterPrometheusRpcServer(s grpc.ServiceRegistrar, srv PrometheusRpcServer) {
	// If the following call pancis, it indicates UnimplementedPrometheusRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrometheusRpc_ServiceDesc, srv)
}

func _PrometheusRpc_GetMonitorScrapePoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorScrapePoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorScrapePoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorScrapePoolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorScrapePoolList(ctx, req.(*GetMonitorScrapePoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorScrapePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorScrapePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorScrapePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorScrapePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorScrapePool(ctx, req.(*CreateMonitorScrapePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorScrapePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorScrapePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorScrapePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapePool(ctx, req.(*UpdateMonitorScrapePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorScrapePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorScrapePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorScrapePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapePool(ctx, req.(*DeleteMonitorScrapePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetMonitorAlertManagerPoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertManagerPoolListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorAlertManagerPoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorAlertManagerPoolList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorAlertManagerPoolList(ctx, req.(*GetAlertManagerPoolListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorAlertManagerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorAlertManagerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorAlertManagerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorAlertManagerPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorAlertManagerPool(ctx, req.(*CreateMonitorAlertManagerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorAlertManagerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorAlertManagerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorAlertManagerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorAlertManagerPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorAlertManagerPool(ctx, req.(*UpdateMonitorAlertManagerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorAlertManagerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorAlertManagerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorAlertManagerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorAlertManagerPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorAlertManagerPool(ctx, req.(*DeleteMonitorAlertManagerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetMonitorScrapeJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorScrapeJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetMonitorScrapeJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetMonitorScrapeJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetMonitorScrapeJobList(ctx, req.(*GetMonitorScrapeJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateMonitorScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateMonitorScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateMonitorScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateMonitorScrapeJob(ctx, req.(*CreateMonitorScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateMonitorScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateMonitorScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateMonitorScrapeJob(ctx, req.(*UpdateMonitorScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteMonitorScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteMonitorScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteMonitorScrapeJob(ctx, req.(*DeleteMonitorScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetAlertRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRuleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetAlertRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetAlertRuleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetAlertRuleList(ctx, req.(*GetAlertRuleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateAlertRule(ctx, req.(*CreateAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateAlertRule(ctx, req.(*UpdateAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteAlertRule(ctx, req.(*DeleteAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CheckPromqlExpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPromqlExprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CheckPromqlExpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CheckPromqlExpr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CheckPromqlExpr(ctx, req.(*CheckPromqlExprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_EnableSwitchAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSwitchAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).EnableSwitchAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_EnableSwitchAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).EnableSwitchAlertRule(ctx, req.(*EnableSwitchAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_BatchEnableSwitchAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEnableSwitchAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).BatchEnableSwitchAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_BatchEnableSwitchAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).BatchEnableSwitchAlertRule(ctx, req.(*BatchEnableSwitchAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_BatchDeleteAlertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteAlertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).BatchDeleteAlertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_BatchDeleteAlertRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).BatchDeleteAlertRule(ctx, req.(*BatchDeleteAlertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_GetRecordRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRuleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).GetRecordRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_GetRecordRuleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).GetRecordRuleList(ctx, req.(*GetRecordRuleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_CreateRecordRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).CreateRecordRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_CreateRecordRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).CreateRecordRule(ctx, req.(*CreateRecordRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_UpdateRecordRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).UpdateRecordRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_UpdateRecordRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).UpdateRecordRule(ctx, req.(*UpdateRecordRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_DeleteRecordRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).DeleteRecordRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_DeleteRecordRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).DeleteRecordRule(ctx, req.(*DeleteRecordRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_EnableSwitchRecordRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSwitchRecordRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).EnableSwitchRecordRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_EnableSwitchRecordRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).EnableSwitchRecordRule(ctx, req.(*EnableSwitchRecordRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_BatchEnableSwitchRecordRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEnableSwitchRecordRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).BatchEnableSwitchRecordRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_BatchEnableSwitchRecordRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).BatchEnableSwitchRecordRule(ctx, req.(*BatchEnableSwitchRecordRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrometheusRpc_BatchDeleteRecordRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRecordRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusRpcServer).BatchDeleteRecordRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrometheusRpc_BatchDeleteRecordRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusRpcServer).BatchDeleteRecordRule(ctx, req.(*BatchDeleteRecordRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrometheusRpc_ServiceDesc is the grpc.ServiceDesc for PrometheusRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrometheusRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prometheus_rpc.Prometheus_rpc",
	HandlerType: (*PrometheusRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonitorScrapePoolList",
			Handler:    _PrometheusRpc_GetMonitorScrapePoolList_Handler,
		},
		{
			MethodName: "CreateMonitorScrapePool",
			Handler:    _PrometheusRpc_CreateMonitorScrapePool_Handler,
		},
		{
			MethodName: "UpdateMonitorScrapePool",
			Handler:    _PrometheusRpc_UpdateMonitorScrapePool_Handler,
		},
		{
			MethodName: "DeleteMonitorScrapePool",
			Handler:    _PrometheusRpc_DeleteMonitorScrapePool_Handler,
		},
		{
			MethodName: "GetMonitorAlertManagerPoolList",
			Handler:    _PrometheusRpc_GetMonitorAlertManagerPoolList_Handler,
		},
		{
			MethodName: "CreateMonitorAlertManagerPool",
			Handler:    _PrometheusRpc_CreateMonitorAlertManagerPool_Handler,
		},
		{
			MethodName: "UpdateMonitorAlertManagerPool",
			Handler:    _PrometheusRpc_UpdateMonitorAlertManagerPool_Handler,
		},
		{
			MethodName: "DeleteMonitorAlertManagerPool",
			Handler:    _PrometheusRpc_DeleteMonitorAlertManagerPool_Handler,
		},
		{
			MethodName: "GetMonitorScrapeJobList",
			Handler:    _PrometheusRpc_GetMonitorScrapeJobList_Handler,
		},
		{
			MethodName: "CreateMonitorScrapeJob",
			Handler:    _PrometheusRpc_CreateMonitorScrapeJob_Handler,
		},
		{
			MethodName: "UpdateMonitorScrapeJob",
			Handler:    _PrometheusRpc_UpdateMonitorScrapeJob_Handler,
		},
		{
			MethodName: "DeleteMonitorScrapeJob",
			Handler:    _PrometheusRpc_DeleteMonitorScrapeJob_Handler,
		},
		{
			MethodName: "GetAlertRuleList",
			Handler:    _PrometheusRpc_GetAlertRuleList_Handler,
		},
		{
			MethodName: "CreateAlertRule",
			Handler:    _PrometheusRpc_CreateAlertRule_Handler,
		},
		{
			MethodName: "UpdateAlertRule",
			Handler:    _PrometheusRpc_UpdateAlertRule_Handler,
		},
		{
			MethodName: "DeleteAlertRule",
			Handler:    _PrometheusRpc_DeleteAlertRule_Handler,
		},
		{
			MethodName: "CheckPromqlExpr",
			Handler:    _PrometheusRpc_CheckPromqlExpr_Handler,
		},
		{
			MethodName: "EnableSwitchAlertRule",
			Handler:    _PrometheusRpc_EnableSwitchAlertRule_Handler,
		},
		{
			MethodName: "BatchEnableSwitchAlertRule",
			Handler:    _PrometheusRpc_BatchEnableSwitchAlertRule_Handler,
		},
		{
			MethodName: "BatchDeleteAlertRule",
			Handler:    _PrometheusRpc_BatchDeleteAlertRule_Handler,
		},
		{
			MethodName: "GetRecordRuleList",
			Handler:    _PrometheusRpc_GetRecordRuleList_Handler,
		},
		{
			MethodName: "CreateRecordRule",
			Handler:    _PrometheusRpc_CreateRecordRule_Handler,
		},
		{
			MethodName: "UpdateRecordRule",
			Handler:    _PrometheusRpc_UpdateRecordRule_Handler,
		},
		{
			MethodName: "DeleteRecordRule",
			Handler:    _PrometheusRpc_DeleteRecordRule_Handler,
		},
		{
			MethodName: "EnableSwitchRecordRule",
			Handler:    _PrometheusRpc_EnableSwitchRecordRule_Handler,
		},
		{
			MethodName: "BatchEnableSwitchRecordRule",
			Handler:    _PrometheusRpc_BatchEnableSwitchRecordRule_Handler,
		},
		{
			MethodName: "BatchDeleteRecordRule",
			Handler:    _PrometheusRpc_BatchDeleteRecordRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prometheus_rpc.proto",
}
