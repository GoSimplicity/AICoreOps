// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: aicoreops_rds.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RdsService_GetRdsUnbindList_FullMethodName = "/tree_rpc.RdsService/GetRdsUnbindList"
	RdsService_GetRdsList_FullMethodName       = "/tree_rpc.RdsService/GetRdsList"
	RdsService_BindRds_FullMethodName          = "/tree_rpc.RdsService/BindRds"
	RdsService_UnBindRds_FullMethodName        = "/tree_rpc.RdsService/UnBindRds"
	RdsService_BatchOperateRds_FullMethodName  = "/tree_rpc.RdsService/BatchOperateRds"
)

// RdsServiceClient is the client API for RdsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RDS资源服务
type RdsServiceClient interface {
	// 获取未绑定的RDS列表
	GetRdsUnbindList(ctx context.Context, in *GetRdsUnbindListRequest, opts ...grpc.CallOption) (*GetRdsUnbindListResponse, error)
	// 获取已绑定的RDS列表
	GetRdsList(ctx context.Context, in *GetRdsListRequest, opts ...grpc.CallOption) (*GetRdsListResponse, error)
	// 绑定RDS到资源树节点
	BindRds(ctx context.Context, in *BindRdsRequest, opts ...grpc.CallOption) (*BindRdsResponse, error)
	// 从资源树节点解绑RDS
	UnBindRds(ctx context.Context, in *UnBindRdsRequest, opts ...grpc.CallOption) (*UnBindRdsResponse, error)
	// 批量操作RDS实例
	BatchOperateRds(ctx context.Context, in *BatchOperateRdsRequest, opts ...grpc.CallOption) (*BatchOperateRdsResponse, error)
}

type rdsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRdsServiceClient(cc grpc.ClientConnInterface) RdsServiceClient {
	return &rdsServiceClient{cc}
}

func (c *rdsServiceClient) GetRdsUnbindList(ctx context.Context, in *GetRdsUnbindListRequest, opts ...grpc.CallOption) (*GetRdsUnbindListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRdsUnbindListResponse)
	err := c.cc.Invoke(ctx, RdsService_GetRdsUnbindList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdsServiceClient) GetRdsList(ctx context.Context, in *GetRdsListRequest, opts ...grpc.CallOption) (*GetRdsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRdsListResponse)
	err := c.cc.Invoke(ctx, RdsService_GetRdsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdsServiceClient) BindRds(ctx context.Context, in *BindRdsRequest, opts ...grpc.CallOption) (*BindRdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindRdsResponse)
	err := c.cc.Invoke(ctx, RdsService_BindRds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdsServiceClient) UnBindRds(ctx context.Context, in *UnBindRdsRequest, opts ...grpc.CallOption) (*UnBindRdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBindRdsResponse)
	err := c.cc.Invoke(ctx, RdsService_UnBindRds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdsServiceClient) BatchOperateRds(ctx context.Context, in *BatchOperateRdsRequest, opts ...grpc.CallOption) (*BatchOperateRdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOperateRdsResponse)
	err := c.cc.Invoke(ctx, RdsService_BatchOperateRds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RdsServiceServer is the server API for RdsService service.
// All implementations must embed UnimplementedRdsServiceServer
// for forward compatibility
//
// RDS资源服务
type RdsServiceServer interface {
	// 获取未绑定的RDS列表
	GetRdsUnbindList(context.Context, *GetRdsUnbindListRequest) (*GetRdsUnbindListResponse, error)
	// 获取已绑定的RDS列表
	GetRdsList(context.Context, *GetRdsListRequest) (*GetRdsListResponse, error)
	// 绑定RDS到资源树节点
	BindRds(context.Context, *BindRdsRequest) (*BindRdsResponse, error)
	// 从资源树节点解绑RDS
	UnBindRds(context.Context, *UnBindRdsRequest) (*UnBindRdsResponse, error)
	// 批量操作RDS实例
	BatchOperateRds(context.Context, *BatchOperateRdsRequest) (*BatchOperateRdsResponse, error)
	mustEmbedUnimplementedRdsServiceServer()
}

// UnimplementedRdsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRdsServiceServer struct {
}

func (UnimplementedRdsServiceServer) GetRdsUnbindList(context.Context, *GetRdsUnbindListRequest) (*GetRdsUnbindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRdsUnbindList not implemented")
}
func (UnimplementedRdsServiceServer) GetRdsList(context.Context, *GetRdsListRequest) (*GetRdsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRdsList not implemented")
}
func (UnimplementedRdsServiceServer) BindRds(context.Context, *BindRdsRequest) (*BindRdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindRds not implemented")
}
func (UnimplementedRdsServiceServer) UnBindRds(context.Context, *UnBindRdsRequest) (*UnBindRdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindRds not implemented")
}
func (UnimplementedRdsServiceServer) BatchOperateRds(context.Context, *BatchOperateRdsRequest) (*BatchOperateRdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateRds not implemented")
}
func (UnimplementedRdsServiceServer) mustEmbedUnimplementedRdsServiceServer() {}

// UnsafeRdsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RdsServiceServer will
// result in compilation errors.
type UnsafeRdsServiceServer interface {
	mustEmbedUnimplementedRdsServiceServer()
}

func RegisterRdsServiceServer(s grpc.ServiceRegistrar, srv RdsServiceServer) {
	s.RegisterService(&RdsService_ServiceDesc, srv)
}

func _RdsService_GetRdsUnbindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRdsUnbindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).GetRdsUnbindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdsService_GetRdsUnbindList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).GetRdsUnbindList(ctx, req.(*GetRdsUnbindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdsService_GetRdsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRdsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).GetRdsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdsService_GetRdsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).GetRdsList(ctx, req.(*GetRdsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdsService_BindRds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).BindRds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdsService_BindRds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).BindRds(ctx, req.(*BindRdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdsService_UnBindRds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindRdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).UnBindRds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdsService_UnBindRds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).UnBindRds(ctx, req.(*UnBindRdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdsService_BatchOperateRds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateRdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).BatchOperateRds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdsService_BatchOperateRds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).BatchOperateRds(ctx, req.(*BatchOperateRdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RdsService_ServiceDesc is the grpc.ServiceDesc for RdsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RdsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tree_rpc.RdsService",
	HandlerType: (*RdsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRdsUnbindList",
			Handler:    _RdsService_GetRdsUnbindList_Handler,
		},
		{
			MethodName: "GetRdsList",
			Handler:    _RdsService_GetRdsList_Handler,
		},
		{
			MethodName: "BindRds",
			Handler:    _RdsService_BindRds_Handler,
		},
		{
			MethodName: "UnBindRds",
			Handler:    _RdsService_UnBindRds_Handler,
		},
		{
			MethodName: "BatchOperateRds",
			Handler:    _RdsService_BatchOperateRds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aicoreops_rds.proto",
}
