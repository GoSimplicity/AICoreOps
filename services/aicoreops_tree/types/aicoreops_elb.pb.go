// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: aicoreops_elb.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ELB实例基础信息
type ElbInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId   string            `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                                                            // ELB实例ID
	InstanceName string            `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`                                                      // 实例名称
	InstanceType string            `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`                                                      // 实例规格
	Status       string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                                                      // 实例状态
	PrivateIp    string            `protobuf:"bytes,5,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`                                                               // 私网IP
	PublicIp     string            `protobuf:"bytes,6,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`                                                                  // 公网IP
	RegionId     string            `protobuf:"bytes,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`                                                                  // 地域ID
	ZoneId       string            `protobuf:"bytes,8,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`                                                                        // 可用区ID
	VpcId        string            `protobuf:"bytes,9,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`                                                                           // VPC ID
	CreateTime   int64             `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                          // 创建时间
	ExpiredTime  int64             `protobuf:"varint,11,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`                                                       // 过期时间
	Tags         map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 标签
}

func (x *ElbInstance) Reset() {
	*x = ElbInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElbInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElbInstance) ProtoMessage() {}

func (x *ElbInstance) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElbInstance.ProtoReflect.Descriptor instead.
func (*ElbInstance) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{0}
}

func (x *ElbInstance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ElbInstance) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ElbInstance) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ElbInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ElbInstance) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *ElbInstance) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *ElbInstance) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ElbInstance) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *ElbInstance) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ElbInstance) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ElbInstance) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *ElbInstance) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// 获取未绑定的ELB列表请求
type GetElbUnbindListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize     int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 每页数量
	PageNum      int32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`               // 页码
	RegionId     string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`             // 按地域筛选
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"` // 按实例规格筛选
	Keyword      string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`                               // 搜索关键字(实例ID/名称/IP)
}

func (x *GetElbUnbindListRequest) Reset() {
	*x = GetElbUnbindListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElbUnbindListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElbUnbindListRequest) ProtoMessage() {}

func (x *GetElbUnbindListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElbUnbindListRequest.ProtoReflect.Descriptor instead.
func (*GetElbUnbindListRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{1}
}

func (x *GetElbUnbindListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetElbUnbindListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetElbUnbindListRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetElbUnbindListRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *GetElbUnbindListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type GetElbUnbindListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*ElbInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"` // ELB实例列表
	Total     int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`        // 总数量
}

func (x *GetElbUnbindListResponse) Reset() {
	*x = GetElbUnbindListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElbUnbindListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElbUnbindListResponse) ProtoMessage() {}

func (x *GetElbUnbindListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElbUnbindListResponse.ProtoReflect.Descriptor instead.
func (*GetElbUnbindListResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{2}
}

func (x *GetElbUnbindListResponse) GetInstances() []*ElbInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GetElbUnbindListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取已绑定的ELB列表请求
type GetElbListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	PageNum  int32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页码
	NodeId   int64  `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`       // 资源树节点ID
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`  // 按地域筛选
	Status   string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                      // 按状态筛选
	Keyword  string `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键字
}

func (x *GetElbListRequest) Reset() {
	*x = GetElbListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElbListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElbListRequest) ProtoMessage() {}

func (x *GetElbListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElbListRequest.ProtoReflect.Descriptor instead.
func (*GetElbListRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{3}
}

func (x *GetElbListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetElbListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetElbListRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *GetElbListRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetElbListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetElbListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type GetElbListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*ElbInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"` // ELB实例列表
	Total     int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`        // 总数量
}

func (x *GetElbListResponse) Reset() {
	*x = GetElbListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElbListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElbListResponse) ProtoMessage() {}

func (x *GetElbListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElbListResponse.ProtoReflect.Descriptor instead.
func (*GetElbListResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{4}
}

func (x *GetElbListResponse) GetInstances() []*ElbInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GetElbListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 绑定ELB请求
type BindElbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64             `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                                                                                 // 资源树节点ID
	InstanceIds []string          `protobuf:"bytes,2,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`                                                                                   // ELB实例ID列表
	Operator    string            `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                                                                            // 操作人
	BindAttrs   map[string]string `protobuf:"bytes,4,rep,name=bind_attrs,json=bindAttrs,proto3" json:"bind_attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 绑定时附加的属性
}

func (x *BindElbRequest) Reset() {
	*x = BindElbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindElbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindElbRequest) ProtoMessage() {}

func (x *BindElbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindElbRequest.ProtoReflect.Descriptor instead.
func (*BindElbRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{5}
}

func (x *BindElbRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *BindElbRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *BindElbRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BindElbRequest) GetBindAttrs() map[string]string {
	if x != nil {
		return x.BindAttrs
	}
	return nil
}

type BindElbResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                     // 是否绑定成功
	Message   string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                      // 绑定结果信息
	FailedIds []string `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"` // 绑定失败的实例ID列表
}

func (x *BindElbResponse) Reset() {
	*x = BindElbResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindElbResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindElbResponse) ProtoMessage() {}

func (x *BindElbResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindElbResponse.ProtoReflect.Descriptor instead.
func (*BindElbResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{6}
}

func (x *BindElbResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BindElbResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BindElbResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

// 解绑ELB请求
type UnBindElbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`               // 资源树节点ID
	InstanceIds []string `protobuf:"bytes,2,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"` // ELB实例ID列表
	Operator    string   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                          // 操作人
	Reason      string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                              // 解绑原因
}

func (x *UnBindElbRequest) Reset() {
	*x = UnBindElbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBindElbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBindElbRequest) ProtoMessage() {}

func (x *UnBindElbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBindElbRequest.ProtoReflect.Descriptor instead.
func (*UnBindElbRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{7}
}

func (x *UnBindElbRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UnBindElbRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *UnBindElbRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UnBindElbRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UnBindElbResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                     // 是否解绑成功
	Message   string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                      // 解绑结果信息
	FailedIds []string `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"` // 解绑失败的实例ID列表
}

func (x *UnBindElbResponse) Reset() {
	*x = UnBindElbResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBindElbResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBindElbResponse) ProtoMessage() {}

func (x *UnBindElbResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBindElbResponse.ProtoReflect.Descriptor instead.
func (*UnBindElbResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{8}
}

func (x *UnBindElbResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnBindElbResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UnBindElbResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

// 批量操作ELB请求
type BatchOperateElbRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIds []string          `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`                                                              // ELB实例ID列表
	Operation   string            `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`                                                                                     // 操作类型(start/stop/restart)
	Operator    string            `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                                                       // 操作人
	Force       bool              `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`                                                                                            // 是否强制操作
	Options     map[string]string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 操作选项
}

func (x *BatchOperateElbRequest) Reset() {
	*x = BatchOperateElbRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateElbRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateElbRequest) ProtoMessage() {}

func (x *BatchOperateElbRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateElbRequest.ProtoReflect.Descriptor instead.
func (*BatchOperateElbRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{9}
}

func (x *BatchOperateElbRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *BatchOperateElbRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BatchOperateElbRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BatchOperateElbRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *BatchOperateElbRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type BatchOperateElbResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                                                                        // 是否操作成功
	Message   string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                         // 操作结果信息
	FailedIds []string          `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`                                                                    // 操作失败的实例ID列表
	Results   map[string]string `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 详细操作结果
}

func (x *BatchOperateElbResponse) Reset() {
	*x = BatchOperateElbResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_elb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateElbResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateElbResponse) ProtoMessage() {}

func (x *BatchOperateElbResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_elb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateElbResponse.ProtoReflect.Descriptor instead.
func (*BatchOperateElbResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_elb_proto_rawDescGZIP(), []int{10}
}

func (x *BatchOperateElbResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchOperateElbResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchOperateElbResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

func (x *BatchOperateElbResponse) GetResults() map[string]string {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_aicoreops_elb_proto protoreflect.FileDescriptor

var file_aicoreops_elb_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x6f, 0x70, 0x73, 0x5f, 0x65, 0x6c, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x22,
	0xcb, 0x03, 0x0a, 0x0b, 0x45, 0x6c, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6c, 0x62, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x65, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6c, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x45, 0x6c, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6c, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x0e,
	0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0f,
	0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x11, 0x55, 0x6e, 0x42, 0x69, 0x6e,
	0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22,
	0x90, 0x02, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x45, 0x6c, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x8e, 0x03, 0x0a, 0x0a, 0x45, 0x6c, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62,
	0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x55, 0x6e, 0x62, 0x69,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x55,
	0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x42, 0x69,
	0x6e, 0x64, 0x45, 0x6c, 0x62, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45,
	0x6c, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x55, 0x6e,
	0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x45, 0x6c, 0x62, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aicoreops_elb_proto_rawDescOnce sync.Once
	file_aicoreops_elb_proto_rawDescData = file_aicoreops_elb_proto_rawDesc
)

func file_aicoreops_elb_proto_rawDescGZIP() []byte {
	file_aicoreops_elb_proto_rawDescOnce.Do(func() {
		file_aicoreops_elb_proto_rawDescData = protoimpl.X.CompressGZIP(file_aicoreops_elb_proto_rawDescData)
	})
	return file_aicoreops_elb_proto_rawDescData
}

var file_aicoreops_elb_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_aicoreops_elb_proto_goTypes = []any{
	(*ElbInstance)(nil),              // 0: tree_rpc.ElbInstance
	(*GetElbUnbindListRequest)(nil),  // 1: tree_rpc.GetElbUnbindListRequest
	(*GetElbUnbindListResponse)(nil), // 2: tree_rpc.GetElbUnbindListResponse
	(*GetElbListRequest)(nil),        // 3: tree_rpc.GetElbListRequest
	(*GetElbListResponse)(nil),       // 4: tree_rpc.GetElbListResponse
	(*BindElbRequest)(nil),           // 5: tree_rpc.BindElbRequest
	(*BindElbResponse)(nil),          // 6: tree_rpc.BindElbResponse
	(*UnBindElbRequest)(nil),         // 7: tree_rpc.UnBindElbRequest
	(*UnBindElbResponse)(nil),        // 8: tree_rpc.UnBindElbResponse
	(*BatchOperateElbRequest)(nil),   // 9: tree_rpc.BatchOperateElbRequest
	(*BatchOperateElbResponse)(nil),  // 10: tree_rpc.BatchOperateElbResponse
	nil,                              // 11: tree_rpc.ElbInstance.TagsEntry
	nil,                              // 12: tree_rpc.BindElbRequest.BindAttrsEntry
	nil,                              // 13: tree_rpc.BatchOperateElbRequest.OptionsEntry
	nil,                              // 14: tree_rpc.BatchOperateElbResponse.ResultsEntry
}
var file_aicoreops_elb_proto_depIdxs = []int32{
	11, // 0: tree_rpc.ElbInstance.tags:type_name -> tree_rpc.ElbInstance.TagsEntry
	0,  // 1: tree_rpc.GetElbUnbindListResponse.instances:type_name -> tree_rpc.ElbInstance
	0,  // 2: tree_rpc.GetElbListResponse.instances:type_name -> tree_rpc.ElbInstance
	12, // 3: tree_rpc.BindElbRequest.bind_attrs:type_name -> tree_rpc.BindElbRequest.BindAttrsEntry
	13, // 4: tree_rpc.BatchOperateElbRequest.options:type_name -> tree_rpc.BatchOperateElbRequest.OptionsEntry
	14, // 5: tree_rpc.BatchOperateElbResponse.results:type_name -> tree_rpc.BatchOperateElbResponse.ResultsEntry
	1,  // 6: tree_rpc.ElbService.GetElbUnbindList:input_type -> tree_rpc.GetElbUnbindListRequest
	3,  // 7: tree_rpc.ElbService.GetElbList:input_type -> tree_rpc.GetElbListRequest
	5,  // 8: tree_rpc.ElbService.BindElb:input_type -> tree_rpc.BindElbRequest
	7,  // 9: tree_rpc.ElbService.UnBindElb:input_type -> tree_rpc.UnBindElbRequest
	9,  // 10: tree_rpc.ElbService.BatchOperateElb:input_type -> tree_rpc.BatchOperateElbRequest
	2,  // 11: tree_rpc.ElbService.GetElbUnbindList:output_type -> tree_rpc.GetElbUnbindListResponse
	4,  // 12: tree_rpc.ElbService.GetElbList:output_type -> tree_rpc.GetElbListResponse
	6,  // 13: tree_rpc.ElbService.BindElb:output_type -> tree_rpc.BindElbResponse
	8,  // 14: tree_rpc.ElbService.UnBindElb:output_type -> tree_rpc.UnBindElbResponse
	10, // 15: tree_rpc.ElbService.BatchOperateElb:output_type -> tree_rpc.BatchOperateElbResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_aicoreops_elb_proto_init() }
func file_aicoreops_elb_proto_init() {
	if File_aicoreops_elb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aicoreops_elb_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ElbInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetElbUnbindListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetElbUnbindListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetElbListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetElbListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BindElbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BindElbResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UnBindElbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UnBindElbResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperateElbRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_elb_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperateElbResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aicoreops_elb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aicoreops_elb_proto_goTypes,
		DependencyIndexes: file_aicoreops_elb_proto_depIdxs,
		MessageInfos:      file_aicoreops_elb_proto_msgTypes,
	}.Build()
	File_aicoreops_elb_proto = out.File
	file_aicoreops_elb_proto_rawDesc = nil
	file_aicoreops_elb_proto_goTypes = nil
	file_aicoreops_elb_proto_depIdxs = nil
}
