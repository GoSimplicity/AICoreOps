// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: aicoreops_ecs.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EcsService_GetEcsUnbindList_FullMethodName = "/tree_rpc.EcsService/GetEcsUnbindList"
	EcsService_GetEcsList_FullMethodName       = "/tree_rpc.EcsService/GetEcsList"
	EcsService_BindEcs_FullMethodName          = "/tree_rpc.EcsService/BindEcs"
	EcsService_UnBindEcs_FullMethodName        = "/tree_rpc.EcsService/UnBindEcs"
	EcsService_BatchOperateEcs_FullMethodName  = "/tree_rpc.EcsService/BatchOperateEcs"
)

// EcsServiceClient is the client API for EcsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ECS资源服务
type EcsServiceClient interface {
	// 获取未绑定的ECS列表
	GetEcsUnbindList(ctx context.Context, in *GetEcsUnbindListRequest, opts ...grpc.CallOption) (*GetEcsUnbindListResponse, error)
	// 获取已绑定的ECS列表
	GetEcsList(ctx context.Context, in *GetEcsListRequest, opts ...grpc.CallOption) (*GetEcsListResponse, error)
	// 绑定ECS到资源树节点
	BindEcs(ctx context.Context, in *BindEcsRequest, opts ...grpc.CallOption) (*BindEcsResponse, error)
	// 从资源树节点解绑ECS
	UnBindEcs(ctx context.Context, in *UnBindEcsRequest, opts ...grpc.CallOption) (*UnBindEcsResponse, error)
	// 批量操作ECS实例
	BatchOperateEcs(ctx context.Context, in *BatchOperateEcsRequest, opts ...grpc.CallOption) (*BatchOperateEcsResponse, error)
}

type ecsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcsServiceClient(cc grpc.ClientConnInterface) EcsServiceClient {
	return &ecsServiceClient{cc}
}

func (c *ecsServiceClient) GetEcsUnbindList(ctx context.Context, in *GetEcsUnbindListRequest, opts ...grpc.CallOption) (*GetEcsUnbindListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEcsUnbindListResponse)
	err := c.cc.Invoke(ctx, EcsService_GetEcsUnbindList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsServiceClient) GetEcsList(ctx context.Context, in *GetEcsListRequest, opts ...grpc.CallOption) (*GetEcsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEcsListResponse)
	err := c.cc.Invoke(ctx, EcsService_GetEcsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsServiceClient) BindEcs(ctx context.Context, in *BindEcsRequest, opts ...grpc.CallOption) (*BindEcsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindEcsResponse)
	err := c.cc.Invoke(ctx, EcsService_BindEcs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsServiceClient) UnBindEcs(ctx context.Context, in *UnBindEcsRequest, opts ...grpc.CallOption) (*UnBindEcsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBindEcsResponse)
	err := c.cc.Invoke(ctx, EcsService_UnBindEcs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsServiceClient) BatchOperateEcs(ctx context.Context, in *BatchOperateEcsRequest, opts ...grpc.CallOption) (*BatchOperateEcsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOperateEcsResponse)
	err := c.cc.Invoke(ctx, EcsService_BatchOperateEcs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcsServiceServer is the server API for EcsService service.
// All implementations must embed UnimplementedEcsServiceServer
// for forward compatibility
//
// ECS资源服务
type EcsServiceServer interface {
	// 获取未绑定的ECS列表
	GetEcsUnbindList(context.Context, *GetEcsUnbindListRequest) (*GetEcsUnbindListResponse, error)
	// 获取已绑定的ECS列表
	GetEcsList(context.Context, *GetEcsListRequest) (*GetEcsListResponse, error)
	// 绑定ECS到资源树节点
	BindEcs(context.Context, *BindEcsRequest) (*BindEcsResponse, error)
	// 从资源树节点解绑ECS
	UnBindEcs(context.Context, *UnBindEcsRequest) (*UnBindEcsResponse, error)
	// 批量操作ECS实例
	BatchOperateEcs(context.Context, *BatchOperateEcsRequest) (*BatchOperateEcsResponse, error)
	mustEmbedUnimplementedEcsServiceServer()
}

// UnimplementedEcsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcsServiceServer struct {
}

func (UnimplementedEcsServiceServer) GetEcsUnbindList(context.Context, *GetEcsUnbindListRequest) (*GetEcsUnbindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcsUnbindList not implemented")
}
func (UnimplementedEcsServiceServer) GetEcsList(context.Context, *GetEcsListRequest) (*GetEcsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcsList not implemented")
}
func (UnimplementedEcsServiceServer) BindEcs(context.Context, *BindEcsRequest) (*BindEcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEcs not implemented")
}
func (UnimplementedEcsServiceServer) UnBindEcs(context.Context, *UnBindEcsRequest) (*UnBindEcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindEcs not implemented")
}
func (UnimplementedEcsServiceServer) BatchOperateEcs(context.Context, *BatchOperateEcsRequest) (*BatchOperateEcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateEcs not implemented")
}
func (UnimplementedEcsServiceServer) mustEmbedUnimplementedEcsServiceServer() {}

// UnsafeEcsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcsServiceServer will
// result in compilation errors.
type UnsafeEcsServiceServer interface {
	mustEmbedUnimplementedEcsServiceServer()
}

func RegisterEcsServiceServer(s grpc.ServiceRegistrar, srv EcsServiceServer) {
	s.RegisterService(&EcsService_ServiceDesc, srv)
}

func _EcsService_GetEcsUnbindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcsUnbindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).GetEcsUnbindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcsService_GetEcsUnbindList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).GetEcsUnbindList(ctx, req.(*GetEcsUnbindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsService_GetEcsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).GetEcsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcsService_GetEcsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).GetEcsList(ctx, req.(*GetEcsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsService_BindEcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindEcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).BindEcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcsService_BindEcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).BindEcs(ctx, req.(*BindEcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsService_UnBindEcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindEcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).UnBindEcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcsService_UnBindEcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).UnBindEcs(ctx, req.(*UnBindEcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsService_BatchOperateEcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateEcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).BatchOperateEcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcsService_BatchOperateEcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).BatchOperateEcs(ctx, req.(*BatchOperateEcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcsService_ServiceDesc is the grpc.ServiceDesc for EcsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tree_rpc.EcsService",
	HandlerType: (*EcsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEcsUnbindList",
			Handler:    _EcsService_GetEcsUnbindList_Handler,
		},
		{
			MethodName: "GetEcsList",
			Handler:    _EcsService_GetEcsList_Handler,
		},
		{
			MethodName: "BindEcs",
			Handler:    _EcsService_BindEcs_Handler,
		},
		{
			MethodName: "UnBindEcs",
			Handler:    _EcsService_UnBindEcs_Handler,
		},
		{
			MethodName: "BatchOperateEcs",
			Handler:    _EcsService_BatchOperateEcs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aicoreops_ecs.proto",
}
