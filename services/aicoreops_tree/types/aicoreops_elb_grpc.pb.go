// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: aicoreops_elb.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ElbService_GetElbUnbindList_FullMethodName = "/tree_rpc.ElbService/GetElbUnbindList"
	ElbService_GetElbList_FullMethodName       = "/tree_rpc.ElbService/GetElbList"
	ElbService_BindElb_FullMethodName          = "/tree_rpc.ElbService/BindElb"
	ElbService_UnBindElb_FullMethodName        = "/tree_rpc.ElbService/UnBindElb"
	ElbService_BatchOperateElb_FullMethodName  = "/tree_rpc.ElbService/BatchOperateElb"
)

// ElbServiceClient is the client API for ElbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ELB资源服务
type ElbServiceClient interface {
	// 获取未绑定的ELB列表
	GetElbUnbindList(ctx context.Context, in *GetElbUnbindListRequest, opts ...grpc.CallOption) (*GetElbUnbindListResponse, error)
	// 获取已绑定的ELB列表
	GetElbList(ctx context.Context, in *GetElbListRequest, opts ...grpc.CallOption) (*GetElbListResponse, error)
	// 绑定ELB到资源树节点
	BindElb(ctx context.Context, in *BindElbRequest, opts ...grpc.CallOption) (*BindElbResponse, error)
	// 从资源树节点解绑ELB
	UnBindElb(ctx context.Context, in *UnBindElbRequest, opts ...grpc.CallOption) (*UnBindElbResponse, error)
	// 批量操作ELB实例
	BatchOperateElb(ctx context.Context, in *BatchOperateElbRequest, opts ...grpc.CallOption) (*BatchOperateElbResponse, error)
}

type elbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElbServiceClient(cc grpc.ClientConnInterface) ElbServiceClient {
	return &elbServiceClient{cc}
}

func (c *elbServiceClient) GetElbUnbindList(ctx context.Context, in *GetElbUnbindListRequest, opts ...grpc.CallOption) (*GetElbUnbindListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetElbUnbindListResponse)
	err := c.cc.Invoke(ctx, ElbService_GetElbUnbindList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elbServiceClient) GetElbList(ctx context.Context, in *GetElbListRequest, opts ...grpc.CallOption) (*GetElbListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetElbListResponse)
	err := c.cc.Invoke(ctx, ElbService_GetElbList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elbServiceClient) BindElb(ctx context.Context, in *BindElbRequest, opts ...grpc.CallOption) (*BindElbResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindElbResponse)
	err := c.cc.Invoke(ctx, ElbService_BindElb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elbServiceClient) UnBindElb(ctx context.Context, in *UnBindElbRequest, opts ...grpc.CallOption) (*UnBindElbResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnBindElbResponse)
	err := c.cc.Invoke(ctx, ElbService_UnBindElb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elbServiceClient) BatchOperateElb(ctx context.Context, in *BatchOperateElbRequest, opts ...grpc.CallOption) (*BatchOperateElbResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchOperateElbResponse)
	err := c.cc.Invoke(ctx, ElbService_BatchOperateElb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElbServiceServer is the server API for ElbService service.
// All implementations must embed UnimplementedElbServiceServer
// for forward compatibility
//
// ELB资源服务
type ElbServiceServer interface {
	// 获取未绑定的ELB列表
	GetElbUnbindList(context.Context, *GetElbUnbindListRequest) (*GetElbUnbindListResponse, error)
	// 获取已绑定的ELB列表
	GetElbList(context.Context, *GetElbListRequest) (*GetElbListResponse, error)
	// 绑定ELB到资源树节点
	BindElb(context.Context, *BindElbRequest) (*BindElbResponse, error)
	// 从资源树节点解绑ELB
	UnBindElb(context.Context, *UnBindElbRequest) (*UnBindElbResponse, error)
	// 批量操作ELB实例
	BatchOperateElb(context.Context, *BatchOperateElbRequest) (*BatchOperateElbResponse, error)
	mustEmbedUnimplementedElbServiceServer()
}

// UnimplementedElbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedElbServiceServer struct {
}

func (UnimplementedElbServiceServer) GetElbUnbindList(context.Context, *GetElbUnbindListRequest) (*GetElbUnbindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElbUnbindList not implemented")
}
func (UnimplementedElbServiceServer) GetElbList(context.Context, *GetElbListRequest) (*GetElbListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElbList not implemented")
}
func (UnimplementedElbServiceServer) BindElb(context.Context, *BindElbRequest) (*BindElbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindElb not implemented")
}
func (UnimplementedElbServiceServer) UnBindElb(context.Context, *UnBindElbRequest) (*UnBindElbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindElb not implemented")
}
func (UnimplementedElbServiceServer) BatchOperateElb(context.Context, *BatchOperateElbRequest) (*BatchOperateElbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateElb not implemented")
}
func (UnimplementedElbServiceServer) mustEmbedUnimplementedElbServiceServer() {}

// UnsafeElbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElbServiceServer will
// result in compilation errors.
type UnsafeElbServiceServer interface {
	mustEmbedUnimplementedElbServiceServer()
}

func RegisterElbServiceServer(s grpc.ServiceRegistrar, srv ElbServiceServer) {
	s.RegisterService(&ElbService_ServiceDesc, srv)
}

func _ElbService_GetElbUnbindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetElbUnbindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElbServiceServer).GetElbUnbindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElbService_GetElbUnbindList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElbServiceServer).GetElbUnbindList(ctx, req.(*GetElbUnbindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElbService_GetElbList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetElbListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElbServiceServer).GetElbList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElbService_GetElbList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElbServiceServer).GetElbList(ctx, req.(*GetElbListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElbService_BindElb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindElbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElbServiceServer).BindElb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElbService_BindElb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElbServiceServer).BindElb(ctx, req.(*BindElbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElbService_UnBindElb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindElbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElbServiceServer).UnBindElb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElbService_UnBindElb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElbServiceServer).UnBindElb(ctx, req.(*UnBindElbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElbService_BatchOperateElb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateElbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElbServiceServer).BatchOperateElb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElbService_BatchOperateElb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElbServiceServer).BatchOperateElb(ctx, req.(*BatchOperateElbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElbService_ServiceDesc is the grpc.ServiceDesc for ElbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tree_rpc.ElbService",
	HandlerType: (*ElbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetElbUnbindList",
			Handler:    _ElbService_GetElbUnbindList_Handler,
		},
		{
			MethodName: "GetElbList",
			Handler:    _ElbService_GetElbList_Handler,
		},
		{
			MethodName: "BindElb",
			Handler:    _ElbService_BindElb_Handler,
		},
		{
			MethodName: "UnBindElb",
			Handler:    _ElbService_UnBindElb_Handler,
		},
		{
			MethodName: "BatchOperateElb",
			Handler:    _ElbService_BatchOperateElb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aicoreops_elb.proto",
}
