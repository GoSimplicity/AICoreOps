// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: aicoreops_tree.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 资源树节点结构
type ResourceTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                        // 节点ID
	CreateTime  int64             `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                                                      // 创建时间
	UpdateTime  int64             `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                                                                      // 更新时间
	IsDeleted   int32             `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`                                                                                         // 是否已删除(0-未删除,1-已删除)
	Title       string            `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                                                                                                   // 节点标题
	Pid         int32             `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`                                                                                                                      // 父节点ID(0表示根节点)
	Level       int32             `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`                                                                                                                  // 节点层级(从1开始)
	IsLeaf      int32             `protobuf:"varint,8,opt,name=is_leaf,json=isLeaf,proto3" json:"is_leaf,omitempty"`                                                                                                  // 是否为叶子节点(0-否,1-是)
	Description string            `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`                                                                                                       // 节点描述
	Children    []*ResourceTree   `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`                                                                                                            // 子节点列表
	CmdbId      string            `protobuf:"bytes,11,opt,name=cmdb_id,json=cmdbId,proto3" json:"cmdb_id,omitempty"`                                                                                                  // CMDB资源ID
	CmdbType    string            `protobuf:"bytes,12,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"`                                                                                            // CMDB资源类型
	CmdbAttrs   map[string]string `protobuf:"bytes,13,rep,name=cmdb_attrs,json=cmdbAttrs,proto3" json:"cmdb_attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // CMDB资源属性
	Creator     string            `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`                                                                                                              // 创建者
	Updater     string            `protobuf:"bytes,15,opt,name=updater,proto3" json:"updater,omitempty"`                                                                                                              // 更新者
	Status      string            `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                // 节点状态(normal-正常,disabled-禁用)
}

func (x *ResourceTree) Reset() {
	*x = ResourceTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTree) ProtoMessage() {}

func (x *ResourceTree) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTree.ProtoReflect.Descriptor instead.
func (*ResourceTree) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceTree) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResourceTree) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ResourceTree) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ResourceTree) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

func (x *ResourceTree) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResourceTree) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ResourceTree) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResourceTree) GetIsLeaf() int32 {
	if x != nil {
		return x.IsLeaf
	}
	return 0
}

func (x *ResourceTree) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceTree) GetChildren() []*ResourceTree {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ResourceTree) GetCmdbId() string {
	if x != nil {
		return x.CmdbId
	}
	return ""
}

func (x *ResourceTree) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *ResourceTree) GetCmdbAttrs() map[string]string {
	if x != nil {
		return x.CmdbAttrs
	}
	return nil
}

func (x *ResourceTree) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ResourceTree) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ResourceTree) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 获取树节点列表
type ListTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	PageNum  int32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页码
	CmdbType string `protobuf:"bytes,3,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"`  // 按CMDB类型过滤
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                      // 按状态过滤
	Keyword  string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键字
}

func (x *ListTreeNodeRequest) Reset() {
	*x = ListTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreeNodeRequest) ProtoMessage() {}

func (x *ListTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*ListTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{1}
}

func (x *ListTreeNodeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTreeNodeRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListTreeNodeRequest) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *ListTreeNodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListTreeNodeRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type ListTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ResourceTree `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`  // 节点列表
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总数量
}

func (x *ListTreeNodeResponse) Reset() {
	*x = ListTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreeNodeResponse) ProtoMessage() {}

func (x *ListTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*ListTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{2}
}

func (x *ListTreeNodeResponse) GetNodes() []*ResourceTree {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListTreeNodeResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 选择树节点
type SelectTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 节点ID
	CmdbId       string `protobuf:"bytes,2,opt,name=cmdb_id,json=cmdbId,proto3" json:"cmdb_id,omitempty"`                    // CMDB资源ID
	WithChildren bool   `protobuf:"varint,3,opt,name=with_children,json=withChildren,proto3" json:"with_children,omitempty"` // 是否返回子节点
	WithParents  bool   `protobuf:"varint,4,opt,name=with_parents,json=withParents,proto3" json:"with_parents,omitempty"`    // 是否返回父节点路径
}

func (x *SelectTreeNodeRequest) Reset() {
	*x = SelectTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTreeNodeRequest) ProtoMessage() {}

func (x *SelectTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*SelectTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{3}
}

func (x *SelectTreeNodeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SelectTreeNodeRequest) GetCmdbId() string {
	if x != nil {
		return x.CmdbId
	}
	return ""
}

func (x *SelectTreeNodeRequest) GetWithChildren() bool {
	if x != nil {
		return x.WithChildren
	}
	return false
}

func (x *SelectTreeNodeRequest) GetWithParents() bool {
	if x != nil {
		return x.WithParents
	}
	return false
}

type SelectTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node       *ResourceTree     `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`                                                                                                                       // 节点信息
	Exists     bool              `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`                                                                                                                  // 节点是否存在
	CmdbDetail map[string]string `protobuf:"bytes,3,rep,name=cmdb_detail,json=cmdbDetail,proto3" json:"cmdb_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // CMDB详细信息
	Parents    []*ResourceTree   `protobuf:"bytes,4,rep,name=parents,proto3" json:"parents,omitempty"`                                                                                                                 // 父节点路径
}

func (x *SelectTreeNodeResponse) Reset() {
	*x = SelectTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTreeNodeResponse) ProtoMessage() {}

func (x *SelectTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*SelectTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{4}
}

func (x *SelectTreeNodeResponse) GetNode() *ResourceTree {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SelectTreeNodeResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *SelectTreeNodeResponse) GetCmdbDetail() map[string]string {
	if x != nil {
		return x.CmdbDetail
	}
	return nil
}

func (x *SelectTreeNodeResponse) GetParents() []*ResourceTree {
	if x != nil {
		return x.Parents
	}
	return nil
}

// 获取顶级树节点
type GetTopTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`                      // 限制返回数量
	CmdbType string `protobuf:"bytes,2,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"` // CMDB资源类型
	Status   string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                     // 状态过滤
}

func (x *GetTopTreeNodeRequest) Reset() {
	*x = GetTopTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopTreeNodeRequest) ProtoMessage() {}

func (x *GetTopTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*GetTopTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{5}
}

func (x *GetTopTreeNodeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTopTreeNodeRequest) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *GetTopTreeNodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetTopTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ResourceTree `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`  // 顶级节点列表
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总数量
}

func (x *GetTopTreeNodeResponse) Reset() {
	*x = GetTopTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopTreeNodeResponse) ProtoMessage() {}

func (x *GetTopTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*GetTopTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{6}
}

func (x *GetTopTreeNodeResponse) GetNodes() []*ResourceTree {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetTopTreeNodeResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取叶子节点
type ListLeafTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	PageNum  int32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页码
	CmdbType string `protobuf:"bytes,3,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"`  // CMDB资源类型
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                      // 状态过滤
}

func (x *ListLeafTreeNodeRequest) Reset() {
	*x = ListLeafTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeafTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeafTreeNodeRequest) ProtoMessage() {}

func (x *ListLeafTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeafTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*ListLeafTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{7}
}

func (x *ListLeafTreeNodeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLeafTreeNodeRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListLeafTreeNodeRequest) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *ListLeafTreeNodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListLeafTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ResourceTree `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`  // 叶子节点列表
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总数量
}

func (x *ListLeafTreeNodeResponse) Reset() {
	*x = ListLeafTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeafTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeafTreeNodeResponse) ProtoMessage() {}

func (x *ListLeafTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeafTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*ListLeafTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{8}
}

func (x *ListLeafTreeNodeResponse) GetNodes() []*ResourceTree {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListLeafTreeNodeResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 创建树节点
type CreateTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                                                                                                  // 节点标题(必填)
	Pid         int32             `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`                                                                                                                     // 父节点ID(必填,0表示创建根节点)
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                                                      // 节点描述(选填)
	IsLeaf      int32             `protobuf:"varint,4,opt,name=is_leaf,json=isLeaf,proto3" json:"is_leaf,omitempty"`                                                                                                 // 是否为叶子节点(必填,0-否,1-是)
	CmdbId      string            `protobuf:"bytes,5,opt,name=cmdb_id,json=cmdbId,proto3" json:"cmdb_id,omitempty"`                                                                                                  // CMDB资源ID(选填)
	CmdbType    string            `protobuf:"bytes,6,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"`                                                                                            // CMDB资源类型(选填)
	CmdbAttrs   map[string]string `protobuf:"bytes,7,rep,name=cmdb_attrs,json=cmdbAttrs,proto3" json:"cmdb_attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // CMDB资源属性(选填)
	Creator     string            `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`                                                                                                              // 创建者(必填)
}

func (x *CreateTreeNodeRequest) Reset() {
	*x = CreateTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTreeNodeRequest) ProtoMessage() {}

func (x *CreateTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTreeNodeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTreeNodeRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *CreateTreeNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTreeNodeRequest) GetIsLeaf() int32 {
	if x != nil {
		return x.IsLeaf
	}
	return 0
}

func (x *CreateTreeNodeRequest) GetCmdbId() string {
	if x != nil {
		return x.CmdbId
	}
	return ""
}

func (x *CreateTreeNodeRequest) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *CreateTreeNodeRequest) GetCmdbAttrs() map[string]string {
	if x != nil {
		return x.CmdbAttrs
	}
	return nil
}

func (x *CreateTreeNodeRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type CreateTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    *ResourceTree `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`        // 创建的节点信息
	Success bool          `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"` // 是否创建成功
	Message string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`  // 创建结果信息
}

func (x *CreateTreeNodeResponse) Reset() {
	*x = CreateTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTreeNodeResponse) ProtoMessage() {}

func (x *CreateTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTreeNodeResponse) GetNode() *ResourceTree {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateTreeNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateTreeNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除树节点
type DeleteTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 节点ID
	Force    bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`                       // 是否强制删除(会同时删除子节点)
	SyncCmdb bool   `protobuf:"varint,3,opt,name=sync_cmdb,json=syncCmdb,proto3" json:"sync_cmdb,omitempty"` // 是否同步删除CMDB资源
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`                  // 操作者
	Reason   string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`                      // 删除原因
}

func (x *DeleteTreeNodeRequest) Reset() {
	*x = DeleteTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTreeNodeRequest) ProtoMessage() {}

func (x *DeleteTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTreeNodeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteTreeNodeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeleteTreeNodeRequest) GetSyncCmdb() bool {
	if x != nil {
		return x.SyncCmdb
	}
	return false
}

func (x *DeleteTreeNodeRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DeleteTreeNodeRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeleteTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                           // 是否删除成功
	Message     string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                            // 删除结果信息
	AffectedIds []string `protobuf:"bytes,3,rep,name=affected_ids,json=affectedIds,proto3" json:"affected_ids,omitempty"` // 受影响的节点ID列表
}

func (x *DeleteTreeNodeResponse) Reset() {
	*x = DeleteTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTreeNodeResponse) ProtoMessage() {}

func (x *DeleteTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTreeNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTreeNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTreeNodeResponse) GetAffectedIds() []string {
	if x != nil {
		return x.AffectedIds
	}
	return nil
}

// 获取子节点
type GetChildrenTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       int32  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`                           // 父节点ID
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	PageNum   int32  `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页码
	CmdbType  string `protobuf:"bytes,4,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"`  // CMDB资源类型
	Status    string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                      // 状态过滤
	Recursive bool   `protobuf:"varint,6,opt,name=recursive,proto3" json:"recursive,omitempty"`               // 是否递归获取所有子节点
}

func (x *GetChildrenTreeNodeRequest) Reset() {
	*x = GetChildrenTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChildrenTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildrenTreeNodeRequest) ProtoMessage() {}

func (x *GetChildrenTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildrenTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*GetChildrenTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{13}
}

func (x *GetChildrenTreeNodeRequest) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *GetChildrenTreeNodeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetChildrenTreeNodeRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetChildrenTreeNodeRequest) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *GetChildrenTreeNodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetChildrenTreeNodeRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type GetChildrenTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ResourceTree `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`  // 子节点列表
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总数量
}

func (x *GetChildrenTreeNodeResponse) Reset() {
	*x = GetChildrenTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChildrenTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildrenTreeNodeResponse) ProtoMessage() {}

func (x *GetChildrenTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildrenTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*GetChildrenTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{14}
}

func (x *GetChildrenTreeNodeResponse) GetNodes() []*ResourceTree {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetChildrenTreeNodeResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 更新树节点
type UpdateTreeNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                       // 节点ID(必填)
	Title       string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                                                                  // 节点标题(选填)
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                                                      // 节点描述(选填)
	IsLeaf      int32             `protobuf:"varint,4,opt,name=is_leaf,json=isLeaf,proto3" json:"is_leaf,omitempty"`                                                                                                 // 是否为叶子节点(选填,0-否,1-是)
	CmdbAttrs   map[string]string `protobuf:"bytes,5,rep,name=cmdb_attrs,json=cmdbAttrs,proto3" json:"cmdb_attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 更新CMDB属性(选填)
	Updater     string            `protobuf:"bytes,6,opt,name=updater,proto3" json:"updater,omitempty"`                                                                                                              // 更新者(必填)
	Status      string            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                // 状态(选填)
}

func (x *UpdateTreeNodeRequest) Reset() {
	*x = UpdateTreeNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreeNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreeNodeRequest) ProtoMessage() {}

func (x *UpdateTreeNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreeNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTreeNodeRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateTreeNodeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTreeNodeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTreeNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTreeNodeRequest) GetIsLeaf() int32 {
	if x != nil {
		return x.IsLeaf
	}
	return 0
}

func (x *UpdateTreeNodeRequest) GetCmdbAttrs() map[string]string {
	if x != nil {
		return x.CmdbAttrs
	}
	return nil
}

func (x *UpdateTreeNodeRequest) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *UpdateTreeNodeRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateTreeNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    *ResourceTree `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`        // 更新后的节点信息
	Success bool          `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"` // 是否更新成功
	Message string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`  // 更新结果信息
}

func (x *UpdateTreeNodeResponse) Reset() {
	*x = UpdateTreeNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreeNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreeNodeResponse) ProtoMessage() {}

func (x *UpdateTreeNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreeNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateTreeNodeResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateTreeNodeResponse) GetNode() *ResourceTree {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *UpdateTreeNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateTreeNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// CMDB同步相关
type SyncCMDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdbType    string            `protobuf:"bytes,1,opt,name=cmdb_type,json=cmdbType,proto3" json:"cmdb_type,omitempty"`                                                                                                  // CMDB资源类型
	Force       bool              `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`                                                                                                                       // 是否强制同步
	Operator    string            `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                                                                                  // 操作者
	DryRun      bool              `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`                                                                                                       // 是否试运行
	SyncOptions map[string]string `protobuf:"bytes,5,rep,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 同步选项
}

func (x *SyncCMDBRequest) Reset() {
	*x = SyncCMDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCMDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCMDBRequest) ProtoMessage() {}

func (x *SyncCMDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCMDBRequest.ProtoReflect.Descriptor instead.
func (*SyncCMDBRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{17}
}

func (x *SyncCMDBRequest) GetCmdbType() string {
	if x != nil {
		return x.CmdbType
	}
	return ""
}

func (x *SyncCMDBRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SyncCMDBRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SyncCMDBRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SyncCMDBRequest) GetSyncOptions() map[string]string {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

type SyncCMDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                                                                                             // 同步是否成功
	Message   string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                              // 同步结果信息
	SyncCount int32             `protobuf:"varint,3,opt,name=sync_count,json=syncCount,proto3" json:"sync_count,omitempty"`                                                                                        // 同步资源数量
	FailedIds []string          `protobuf:"bytes,4,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`                                                                                         // 同步失败的资源ID列表
	SyncStats map[string]string `protobuf:"bytes,5,rep,name=sync_stats,json=syncStats,proto3" json:"sync_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 同步统计信息
}

func (x *SyncCMDBResponse) Reset() {
	*x = SyncCMDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_tree_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCMDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCMDBResponse) ProtoMessage() {}

func (x *SyncCMDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_tree_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCMDBResponse.ProtoReflect.Descriptor instead.
func (*SyncCMDBResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_tree_proto_rawDescGZIP(), []int{18}
}

func (x *SyncCMDBResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncCMDBResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyncCMDBResponse) GetSyncCount() int32 {
	if x != nil {
		return x.SyncCount
	}
	return 0
}

func (x *SyncCMDBResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

func (x *SyncCMDBResponse) GetSyncStats() map[string]string {
	if x != nil {
		return x.SyncStats
	}
	return nil
}

var File_aicoreops_tree_proto protoreflect.FileDescriptor

var file_aicoreops_tree_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x6f, 0x70, 0x73, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x22, 0xb2, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x2e, 0x43, 0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x62, 0x41,
	0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x88, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6d,
	0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6d, 0x64,
	0x62, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x16,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x6d,
	0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6d, 0x64, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x63, 0x6d, 0x64, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x43, 0x6d, 0x64, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6d, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd7, 0x02, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0a,
	0x63, 0x6d, 0x64, 0x62, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x62, 0x41, 0x74, 0x74,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6d, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22,
	0xb9, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb7,
	0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6d, 0x64,
	0x62, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63,
	0x6d, 0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6d,
	0x64, 0x62, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4d,
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02,
	0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x8f, 0x06, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x4d, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_aicoreops_tree_proto_rawDescOnce sync.Once
	file_aicoreops_tree_proto_rawDescData = file_aicoreops_tree_proto_rawDesc
)

func file_aicoreops_tree_proto_rawDescGZIP() []byte {
	file_aicoreops_tree_proto_rawDescOnce.Do(func() {
		file_aicoreops_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_aicoreops_tree_proto_rawDescData)
	})
	return file_aicoreops_tree_proto_rawDescData
}

var file_aicoreops_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_aicoreops_tree_proto_goTypes = []any{
	(*ResourceTree)(nil),                // 0: tree_rpc.ResourceTree
	(*ListTreeNodeRequest)(nil),         // 1: tree_rpc.ListTreeNodeRequest
	(*ListTreeNodeResponse)(nil),        // 2: tree_rpc.ListTreeNodeResponse
	(*SelectTreeNodeRequest)(nil),       // 3: tree_rpc.SelectTreeNodeRequest
	(*SelectTreeNodeResponse)(nil),      // 4: tree_rpc.SelectTreeNodeResponse
	(*GetTopTreeNodeRequest)(nil),       // 5: tree_rpc.GetTopTreeNodeRequest
	(*GetTopTreeNodeResponse)(nil),      // 6: tree_rpc.GetTopTreeNodeResponse
	(*ListLeafTreeNodeRequest)(nil),     // 7: tree_rpc.ListLeafTreeNodeRequest
	(*ListLeafTreeNodeResponse)(nil),    // 8: tree_rpc.ListLeafTreeNodeResponse
	(*CreateTreeNodeRequest)(nil),       // 9: tree_rpc.CreateTreeNodeRequest
	(*CreateTreeNodeResponse)(nil),      // 10: tree_rpc.CreateTreeNodeResponse
	(*DeleteTreeNodeRequest)(nil),       // 11: tree_rpc.DeleteTreeNodeRequest
	(*DeleteTreeNodeResponse)(nil),      // 12: tree_rpc.DeleteTreeNodeResponse
	(*GetChildrenTreeNodeRequest)(nil),  // 13: tree_rpc.GetChildrenTreeNodeRequest
	(*GetChildrenTreeNodeResponse)(nil), // 14: tree_rpc.GetChildrenTreeNodeResponse
	(*UpdateTreeNodeRequest)(nil),       // 15: tree_rpc.UpdateTreeNodeRequest
	(*UpdateTreeNodeResponse)(nil),      // 16: tree_rpc.UpdateTreeNodeResponse
	(*SyncCMDBRequest)(nil),             // 17: tree_rpc.SyncCMDBRequest
	(*SyncCMDBResponse)(nil),            // 18: tree_rpc.SyncCMDBResponse
	nil,                                 // 19: tree_rpc.ResourceTree.CmdbAttrsEntry
	nil,                                 // 20: tree_rpc.SelectTreeNodeResponse.CmdbDetailEntry
	nil,                                 // 21: tree_rpc.CreateTreeNodeRequest.CmdbAttrsEntry
	nil,                                 // 22: tree_rpc.UpdateTreeNodeRequest.CmdbAttrsEntry
	nil,                                 // 23: tree_rpc.SyncCMDBRequest.SyncOptionsEntry
	nil,                                 // 24: tree_rpc.SyncCMDBResponse.SyncStatsEntry
}
var file_aicoreops_tree_proto_depIdxs = []int32{
	0,  // 0: tree_rpc.ResourceTree.children:type_name -> tree_rpc.ResourceTree
	19, // 1: tree_rpc.ResourceTree.cmdb_attrs:type_name -> tree_rpc.ResourceTree.CmdbAttrsEntry
	0,  // 2: tree_rpc.ListTreeNodeResponse.nodes:type_name -> tree_rpc.ResourceTree
	0,  // 3: tree_rpc.SelectTreeNodeResponse.node:type_name -> tree_rpc.ResourceTree
	20, // 4: tree_rpc.SelectTreeNodeResponse.cmdb_detail:type_name -> tree_rpc.SelectTreeNodeResponse.CmdbDetailEntry
	0,  // 5: tree_rpc.SelectTreeNodeResponse.parents:type_name -> tree_rpc.ResourceTree
	0,  // 6: tree_rpc.GetTopTreeNodeResponse.nodes:type_name -> tree_rpc.ResourceTree
	0,  // 7: tree_rpc.ListLeafTreeNodeResponse.nodes:type_name -> tree_rpc.ResourceTree
	21, // 8: tree_rpc.CreateTreeNodeRequest.cmdb_attrs:type_name -> tree_rpc.CreateTreeNodeRequest.CmdbAttrsEntry
	0,  // 9: tree_rpc.CreateTreeNodeResponse.node:type_name -> tree_rpc.ResourceTree
	0,  // 10: tree_rpc.GetChildrenTreeNodeResponse.nodes:type_name -> tree_rpc.ResourceTree
	22, // 11: tree_rpc.UpdateTreeNodeRequest.cmdb_attrs:type_name -> tree_rpc.UpdateTreeNodeRequest.CmdbAttrsEntry
	0,  // 12: tree_rpc.UpdateTreeNodeResponse.node:type_name -> tree_rpc.ResourceTree
	23, // 13: tree_rpc.SyncCMDBRequest.sync_options:type_name -> tree_rpc.SyncCMDBRequest.SyncOptionsEntry
	24, // 14: tree_rpc.SyncCMDBResponse.sync_stats:type_name -> tree_rpc.SyncCMDBResponse.SyncStatsEntry
	1,  // 15: tree_rpc.ResourceTreeService.ListTreeNode:input_type -> tree_rpc.ListTreeNodeRequest
	3,  // 16: tree_rpc.ResourceTreeService.SelectTreeNode:input_type -> tree_rpc.SelectTreeNodeRequest
	5,  // 17: tree_rpc.ResourceTreeService.GetTopTreeNode:input_type -> tree_rpc.GetTopTreeNodeRequest
	7,  // 18: tree_rpc.ResourceTreeService.ListLeafTreeNode:input_type -> tree_rpc.ListLeafTreeNodeRequest
	9,  // 19: tree_rpc.ResourceTreeService.CreateTreeNode:input_type -> tree_rpc.CreateTreeNodeRequest
	11, // 20: tree_rpc.ResourceTreeService.DeleteTreeNode:input_type -> tree_rpc.DeleteTreeNodeRequest
	13, // 21: tree_rpc.ResourceTreeService.GetChildrenTreeNode:input_type -> tree_rpc.GetChildrenTreeNodeRequest
	15, // 22: tree_rpc.ResourceTreeService.UpdateTreeNode:input_type -> tree_rpc.UpdateTreeNodeRequest
	17, // 23: tree_rpc.ResourceTreeService.SyncCMDB:input_type -> tree_rpc.SyncCMDBRequest
	2,  // 24: tree_rpc.ResourceTreeService.ListTreeNode:output_type -> tree_rpc.ListTreeNodeResponse
	4,  // 25: tree_rpc.ResourceTreeService.SelectTreeNode:output_type -> tree_rpc.SelectTreeNodeResponse
	6,  // 26: tree_rpc.ResourceTreeService.GetTopTreeNode:output_type -> tree_rpc.GetTopTreeNodeResponse
	8,  // 27: tree_rpc.ResourceTreeService.ListLeafTreeNode:output_type -> tree_rpc.ListLeafTreeNodeResponse
	10, // 28: tree_rpc.ResourceTreeService.CreateTreeNode:output_type -> tree_rpc.CreateTreeNodeResponse
	12, // 29: tree_rpc.ResourceTreeService.DeleteTreeNode:output_type -> tree_rpc.DeleteTreeNodeResponse
	14, // 30: tree_rpc.ResourceTreeService.GetChildrenTreeNode:output_type -> tree_rpc.GetChildrenTreeNodeResponse
	16, // 31: tree_rpc.ResourceTreeService.UpdateTreeNode:output_type -> tree_rpc.UpdateTreeNodeResponse
	18, // 32: tree_rpc.ResourceTreeService.SyncCMDB:output_type -> tree_rpc.SyncCMDBResponse
	24, // [24:33] is the sub-list for method output_type
	15, // [15:24] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_aicoreops_tree_proto_init() }
func file_aicoreops_tree_proto_init() {
	if File_aicoreops_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aicoreops_tree_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SelectTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SelectTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetTopTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetTopTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListLeafTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListLeafTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetChildrenTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetChildrenTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTreeNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTreeNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SyncCMDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_tree_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SyncCMDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aicoreops_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aicoreops_tree_proto_goTypes,
		DependencyIndexes: file_aicoreops_tree_proto_depIdxs,
		MessageInfos:      file_aicoreops_tree_proto_msgTypes,
	}.Build()
	File_aicoreops_tree_proto = out.File
	file_aicoreops_tree_proto_rawDesc = nil
	file_aicoreops_tree_proto_goTypes = nil
	file_aicoreops_tree_proto_depIdxs = nil
}
