// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: aicoreops_rds.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RDS实例基础信息
type RdsInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId   string            `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                                                            // RDS实例ID
	InstanceName string            `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`                                                      // 实例名称
	InstanceType string            `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`                                                      // 实例规格
	Status       string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                                                      // 实例状态
	PrivateIp    string            `protobuf:"bytes,5,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`                                                               // 私网IP
	PublicIp     string            `protobuf:"bytes,6,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`                                                                  // 公网IP
	RegionId     string            `protobuf:"bytes,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`                                                                  // 地域ID
	ZoneId       string            `protobuf:"bytes,8,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`                                                                        // 可用区ID
	VpcId        string            `protobuf:"bytes,9,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`                                                                           // VPC ID
	DbType       string            `protobuf:"bytes,10,opt,name=db_type,json=dbType,proto3" json:"db_type,omitempty"`                                                                       // 数据库类型
	DbVersion    string            `protobuf:"bytes,11,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`                                                              // 数据库版本
	CreateTime   int64             `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                          // 创建时间
	ExpiredTime  int64             `protobuf:"varint,13,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`                                                       // 过期时间
	Tags         map[string]string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 标签
}

func (x *RdsInstance) Reset() {
	*x = RdsInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdsInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdsInstance) ProtoMessage() {}

func (x *RdsInstance) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdsInstance.ProtoReflect.Descriptor instead.
func (*RdsInstance) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{0}
}

func (x *RdsInstance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RdsInstance) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *RdsInstance) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *RdsInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RdsInstance) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *RdsInstance) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *RdsInstance) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *RdsInstance) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *RdsInstance) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *RdsInstance) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *RdsInstance) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

func (x *RdsInstance) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RdsInstance) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *RdsInstance) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// 获取未绑定的RDS列表请求
type GetRdsUnbindListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize     int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 每页数量
	PageNum      int32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`               // 页码
	RegionId     string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`             // 按地域筛选
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"` // 按实例规格筛选
	Keyword      string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`                               // 搜索关键字(实例ID/名称/IP)
}

func (x *GetRdsUnbindListRequest) Reset() {
	*x = GetRdsUnbindListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdsUnbindListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdsUnbindListRequest) ProtoMessage() {}

func (x *GetRdsUnbindListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdsUnbindListRequest.ProtoReflect.Descriptor instead.
func (*GetRdsUnbindListRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{1}
}

func (x *GetRdsUnbindListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRdsUnbindListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetRdsUnbindListRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetRdsUnbindListRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *GetRdsUnbindListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type GetRdsUnbindListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*RdsInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"` // RDS实例列表
	Total     int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`        // 总数量
}

func (x *GetRdsUnbindListResponse) Reset() {
	*x = GetRdsUnbindListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdsUnbindListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdsUnbindListResponse) ProtoMessage() {}

func (x *GetRdsUnbindListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdsUnbindListResponse.ProtoReflect.Descriptor instead.
func (*GetRdsUnbindListResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{2}
}

func (x *GetRdsUnbindListResponse) GetInstances() []*RdsInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GetRdsUnbindListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取已绑定的RDS列表请求
type GetRdsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	PageNum  int32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页码
	NodeId   int64  `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`       // 资源树节点ID
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`  // 按地域筛选
	Status   string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                      // 按状态筛选
	Keyword  string `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键字
}

func (x *GetRdsListRequest) Reset() {
	*x = GetRdsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdsListRequest) ProtoMessage() {}

func (x *GetRdsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdsListRequest.ProtoReflect.Descriptor instead.
func (*GetRdsListRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{3}
}

func (x *GetRdsListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRdsListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetRdsListRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *GetRdsListRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetRdsListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetRdsListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type GetRdsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*RdsInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"` // RDS实例列表
	Total     int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`        // 总数量
}

func (x *GetRdsListResponse) Reset() {
	*x = GetRdsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdsListResponse) ProtoMessage() {}

func (x *GetRdsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdsListResponse.ProtoReflect.Descriptor instead.
func (*GetRdsListResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{4}
}

func (x *GetRdsListResponse) GetInstances() []*RdsInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GetRdsListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 绑定RDS请求
type BindRdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64             `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                                                                                 // 资源树节点ID
	InstanceIds []string          `protobuf:"bytes,2,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`                                                                                   // RDS实例ID列表
	Operator    string            `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                                                                            // 操作人
	BindAttrs   map[string]string `protobuf:"bytes,4,rep,name=bind_attrs,json=bindAttrs,proto3" json:"bind_attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 绑定时附加的属性
}

func (x *BindRdsRequest) Reset() {
	*x = BindRdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindRdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindRdsRequest) ProtoMessage() {}

func (x *BindRdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindRdsRequest.ProtoReflect.Descriptor instead.
func (*BindRdsRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{5}
}

func (x *BindRdsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *BindRdsRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *BindRdsRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BindRdsRequest) GetBindAttrs() map[string]string {
	if x != nil {
		return x.BindAttrs
	}
	return nil
}

type BindRdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                     // 是否绑定成功
	Message   string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                      // 绑定结果信息
	FailedIds []string `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"` // 绑定失败的实例ID列表
}

func (x *BindRdsResponse) Reset() {
	*x = BindRdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindRdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindRdsResponse) ProtoMessage() {}

func (x *BindRdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindRdsResponse.ProtoReflect.Descriptor instead.
func (*BindRdsResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{6}
}

func (x *BindRdsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BindRdsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BindRdsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

// 解绑RDS请求
type UnBindRdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`               // 资源树节点ID
	InstanceIds []string `protobuf:"bytes,2,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"` // RDS实例ID列表
	Operator    string   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                          // 操作人
	Reason      string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                              // 解绑原因
}

func (x *UnBindRdsRequest) Reset() {
	*x = UnBindRdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBindRdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBindRdsRequest) ProtoMessage() {}

func (x *UnBindRdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBindRdsRequest.ProtoReflect.Descriptor instead.
func (*UnBindRdsRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{7}
}

func (x *UnBindRdsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UnBindRdsRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *UnBindRdsRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UnBindRdsRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UnBindRdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                     // 是否解绑成功
	Message   string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                      // 解绑结果信息
	FailedIds []string `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"` // 解绑失败的实例ID列表
}

func (x *UnBindRdsResponse) Reset() {
	*x = UnBindRdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBindRdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBindRdsResponse) ProtoMessage() {}

func (x *UnBindRdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBindRdsResponse.ProtoReflect.Descriptor instead.
func (*UnBindRdsResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{8}
}

func (x *UnBindRdsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnBindRdsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UnBindRdsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

// 批量操作RDS请求
type BatchOperateRdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIds []string          `protobuf:"bytes,1,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`                                                              // RDS实例ID列表
	Operation   string            `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`                                                                                     // 操作类型(start/stop/restart)
	Operator    string            `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                                                       // 操作人
	Force       bool              `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`                                                                                            // 是否强制操作
	Options     map[string]string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 操作选项
}

func (x *BatchOperateRdsRequest) Reset() {
	*x = BatchOperateRdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateRdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateRdsRequest) ProtoMessage() {}

func (x *BatchOperateRdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateRdsRequest.ProtoReflect.Descriptor instead.
func (*BatchOperateRdsRequest) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{9}
}

func (x *BatchOperateRdsRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *BatchOperateRdsRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BatchOperateRdsRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BatchOperateRdsRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *BatchOperateRdsRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type BatchOperateRdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                                                                        // 是否操作成功
	Message   string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                         // 操作结果信息
	FailedIds []string          `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`                                                                    // 操作失败的实例ID列表
	Results   map[string]string `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 详细操作结果
}

func (x *BatchOperateRdsResponse) Reset() {
	*x = BatchOperateRdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aicoreops_rds_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateRdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateRdsResponse) ProtoMessage() {}

func (x *BatchOperateRdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aicoreops_rds_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateRdsResponse.ProtoReflect.Descriptor instead.
func (*BatchOperateRdsResponse) Descriptor() ([]byte, []int) {
	return file_aicoreops_rds_proto_rawDescGZIP(), []int{10}
}

func (x *BatchOperateRdsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchOperateRdsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchOperateRdsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

func (x *BatchOperateRdsResponse) GetResults() map[string]string {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_aicoreops_rds_proto protoreflect.FileDescriptor

var file_aicoreops_rds_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x6f, 0x70, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x22,
	0x83, 0x04, 0x0a, 0x0b, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73,
	0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x65, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x55,
	0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46,
	0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x69, 0x6e,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x55,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x66, 0x0a, 0x11, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x17, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0x8e, 0x03, 0x0a, 0x0a, 0x52, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x64, 0x73, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x52, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x12, 0x18, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73, 0x12,
	0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_aicoreops_rds_proto_rawDescOnce sync.Once
	file_aicoreops_rds_proto_rawDescData = file_aicoreops_rds_proto_rawDesc
)

func file_aicoreops_rds_proto_rawDescGZIP() []byte {
	file_aicoreops_rds_proto_rawDescOnce.Do(func() {
		file_aicoreops_rds_proto_rawDescData = protoimpl.X.CompressGZIP(file_aicoreops_rds_proto_rawDescData)
	})
	return file_aicoreops_rds_proto_rawDescData
}

var file_aicoreops_rds_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_aicoreops_rds_proto_goTypes = []any{
	(*RdsInstance)(nil),              // 0: tree_rpc.RdsInstance
	(*GetRdsUnbindListRequest)(nil),  // 1: tree_rpc.GetRdsUnbindListRequest
	(*GetRdsUnbindListResponse)(nil), // 2: tree_rpc.GetRdsUnbindListResponse
	(*GetRdsListRequest)(nil),        // 3: tree_rpc.GetRdsListRequest
	(*GetRdsListResponse)(nil),       // 4: tree_rpc.GetRdsListResponse
	(*BindRdsRequest)(nil),           // 5: tree_rpc.BindRdsRequest
	(*BindRdsResponse)(nil),          // 6: tree_rpc.BindRdsResponse
	(*UnBindRdsRequest)(nil),         // 7: tree_rpc.UnBindRdsRequest
	(*UnBindRdsResponse)(nil),        // 8: tree_rpc.UnBindRdsResponse
	(*BatchOperateRdsRequest)(nil),   // 9: tree_rpc.BatchOperateRdsRequest
	(*BatchOperateRdsResponse)(nil),  // 10: tree_rpc.BatchOperateRdsResponse
	nil,                              // 11: tree_rpc.RdsInstance.TagsEntry
	nil,                              // 12: tree_rpc.BindRdsRequest.BindAttrsEntry
	nil,                              // 13: tree_rpc.BatchOperateRdsRequest.OptionsEntry
	nil,                              // 14: tree_rpc.BatchOperateRdsResponse.ResultsEntry
}
var file_aicoreops_rds_proto_depIdxs = []int32{
	11, // 0: tree_rpc.RdsInstance.tags:type_name -> tree_rpc.RdsInstance.TagsEntry
	0,  // 1: tree_rpc.GetRdsUnbindListResponse.instances:type_name -> tree_rpc.RdsInstance
	0,  // 2: tree_rpc.GetRdsListResponse.instances:type_name -> tree_rpc.RdsInstance
	12, // 3: tree_rpc.BindRdsRequest.bind_attrs:type_name -> tree_rpc.BindRdsRequest.BindAttrsEntry
	13, // 4: tree_rpc.BatchOperateRdsRequest.options:type_name -> tree_rpc.BatchOperateRdsRequest.OptionsEntry
	14, // 5: tree_rpc.BatchOperateRdsResponse.results:type_name -> tree_rpc.BatchOperateRdsResponse.ResultsEntry
	1,  // 6: tree_rpc.RdsService.GetRdsUnbindList:input_type -> tree_rpc.GetRdsUnbindListRequest
	3,  // 7: tree_rpc.RdsService.GetRdsList:input_type -> tree_rpc.GetRdsListRequest
	5,  // 8: tree_rpc.RdsService.BindRds:input_type -> tree_rpc.BindRdsRequest
	7,  // 9: tree_rpc.RdsService.UnBindRds:input_type -> tree_rpc.UnBindRdsRequest
	9,  // 10: tree_rpc.RdsService.BatchOperateRds:input_type -> tree_rpc.BatchOperateRdsRequest
	2,  // 11: tree_rpc.RdsService.GetRdsUnbindList:output_type -> tree_rpc.GetRdsUnbindListResponse
	4,  // 12: tree_rpc.RdsService.GetRdsList:output_type -> tree_rpc.GetRdsListResponse
	6,  // 13: tree_rpc.RdsService.BindRds:output_type -> tree_rpc.BindRdsResponse
	8,  // 14: tree_rpc.RdsService.UnBindRds:output_type -> tree_rpc.UnBindRdsResponse
	10, // 15: tree_rpc.RdsService.BatchOperateRds:output_type -> tree_rpc.BatchOperateRdsResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_aicoreops_rds_proto_init() }
func file_aicoreops_rds_proto_init() {
	if File_aicoreops_rds_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aicoreops_rds_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RdsInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetRdsUnbindListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRdsUnbindListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetRdsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetRdsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BindRdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BindRdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UnBindRdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UnBindRdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperateRdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aicoreops_rds_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperateRdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aicoreops_rds_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aicoreops_rds_proto_goTypes,
		DependencyIndexes: file_aicoreops_rds_proto_depIdxs,
		MessageInfos:      file_aicoreops_rds_proto_msgTypes,
	}.Build()
	File_aicoreops_rds_proto = out.File
	file_aicoreops_rds_proto_rawDesc = nil
	file_aicoreops_rds_proto_goTypes = nil
	file_aicoreops_rds_proto_depIdxs = nil
}
