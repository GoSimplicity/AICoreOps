// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	historySessionFieldNames          = builder.RawFieldNames(&HistorySession{})
	historySessionRows                = strings.Join(historySessionFieldNames, ",")
	historySessionRowsExpectAutoSet   = strings.Join(stringx.Remove(historySessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	historySessionRowsWithPlaceHolder = strings.Join(stringx.Remove(historySessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	historySessionModel interface {
		Insert(ctx context.Context, data *HistorySession) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HistorySession, error)
		Update(ctx context.Context, data *HistorySession) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHistorySessionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HistorySession struct {
		Id        int64     `db:"id"`
		UserId    int64     `db:"user_id"`
		SessionId string    `db:"session_id"`
		Title     string    `db:"title"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newHistorySessionModel(conn sqlx.SqlConn) *defaultHistorySessionModel {
	return &defaultHistorySessionModel{
		conn:  conn,
		table: "`history_session`",
	}
}

func (m *defaultHistorySessionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHistorySessionModel) FindOne(ctx context.Context, id int64) (*HistorySession, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", historySessionRows, m.table)
	var resp HistorySession
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHistorySessionModel) Insert(ctx context.Context, data *HistorySession) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, historySessionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.SessionId, data.Title)
	return ret, err
}

func (m *defaultHistorySessionModel) Update(ctx context.Context, data *HistorySession) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, historySessionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.SessionId, data.Title, data.Id)
	return err
}

func (m *defaultHistorySessionModel) tableName() string {
	return m.table
}
